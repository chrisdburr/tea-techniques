services:
    db:
        image: postgres:16
        env_file:
            - .env
        environment:
            - POSTGRES_DB=${DB_NAME:-techniques}
            - POSTGRES_USER=${DB_USER:-postgres}
            - POSTGRES_PASSWORD=${DB_PASSWORD:-postgres}
        volumes:
            - postgres_data_dev:/var/lib/postgresql/data
        ports:
            - "5432:5432"
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U postgres"]
            interval: 10s
            timeout: 5s
            retries: 5
            start_period: 10s

    backend:
        build:
            context: ./backend
            dockerfile: Dockerfile
        env_file:
            - .env
        command: ["python", "manage.py", "runserver", "0.0.0.0:8000"]
        volumes:
            - ./backend:/app
        ports:
            - "8000:8000"
        depends_on:
            db:
                condition: service_healthy
        healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost:8000/api/health/"]
            interval: 30s
            timeout: 10s
            retries: 5
            start_period: 30s

    frontend:
        build:
            context: ./frontend
            dockerfile: Dockerfile
            args:
                - NEXT_PUBLIC_API_URL=http://backend:8000/api
                - NEXT_PUBLIC_SWAGGER_URL=${NEXT_PUBLIC_SWAGGER_URL:-/swagger/}
        env_file:
            - .env
        command: pnpm run dev
        volumes:
            - ./frontend:/app
            - /app/node_modules
            - /app/.next
        ports:
            - "3000:3000"
        depends_on:
            - backend
        environment:
            - NODE_ENV=development
            - NEXT_TELEMETRY_DISABLED=1
            - WATCHPACK_POLLING=true
        healthcheck:
            test: ["CMD", "curl", "--fail", "http://localhost:3000"]
            interval: 30s
            timeout: 10s
            retries: 10
            start_period: 30s

volumes:
    postgres_data_dev:
