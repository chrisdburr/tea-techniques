name: Build and Push Docker Images

on:
  push:
    branches: [main]
    tags: ['v*']
  pull_request:
    branches: [main]
  release:
    types: [published]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_BACKEND: ${{ github.repository }}-backend
  IMAGE_NAME_FRONTEND: ${{ github.repository }}-frontend

jobs:
  build-backend:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}
          labels: |
            org.opencontainers.image.title=TEA Techniques Backend
            org.opencontainers.image.description=Django backend for TEA Techniques application
            org.opencontainers.image.vendor=${{ github.repository_owner }}

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile.production
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      - name: Test backend image
        if: github.event_name == 'pull_request'
        run: |
          docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:${{ steps.meta.outputs.version }} python manage.py check --deploy

  build-frontend:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}
          labels: |
            org.opencontainers.image.title=TEA Techniques Frontend
            org.opencontainers.image.description=Next.js frontend for TEA Techniques application
            org.opencontainers.image.vendor=${{ github.repository_owner }}

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile.production
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            NEXT_PUBLIC_API_URL=/api

  build-compose:
    runs-on: ubuntu-latest
    needs: [build-backend, build-frontend]
    if: github.event_name != 'pull_request'
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Docker Compose for deployment
        run: |
          cat > docker-compose.production.yml << 'EOF'
          version: '3.8'

          services:
            backend:
              image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:${{ github.ref_name == 'main' && 'latest' || github.ref_name }}
              environment:
                - DEBUG=False
                - DJANGO_SETTINGS_MODULE=config.settings.production
                - DATABASE_URL=${DATABASE_URL:-postgresql://postgres:postgres@db:5432/tea_techniques}
                - SECRET_KEY=${SECRET_KEY}
                - ALLOWED_HOSTS=${ALLOWED_HOSTS:-localhost,127.0.0.1}
                - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS:-http://localhost:3000}
              depends_on:
                - db
              volumes:
                - static_volume:/app/staticfiles
                - media_volume:/app/media
              networks:
                - tea-network

            frontend:
              image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:${{ github.ref_name == 'main' && 'latest' || github.ref_name }}
              environment:
                - NODE_ENV=production
                - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://localhost:8000}
              depends_on:
                - backend
              networks:
                - tea-network

            db:
              image: postgres:15-alpine
              environment:
                - POSTGRES_DB=${POSTGRES_DB:-tea_techniques}
                - POSTGRES_USER=${POSTGRES_USER:-postgres}
                - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
              volumes:
                - postgres_data:/var/lib/postgresql/data
              networks:
                - tea-network

            nginx:
              image: nginx:alpine
              ports:
                - "80:80"
                - "443:443"
              volumes:
                - ./nginx.conf:/etc/nginx/nginx.conf:ro
                - static_volume:/app/staticfiles:ro
                - media_volume:/app/media:ro
                - certbot_certs:/etc/letsencrypt:ro
              depends_on:
                - backend
                - frontend
              networks:
                - tea-network

          volumes:
            postgres_data:
            static_volume:
            media_volume:
            certbot_certs:

          networks:
            tea-network:
              driver: bridge
          EOF

      - name: Create nginx configuration
        run: |
          mkdir -p nginx
          cat > nginx.conf << 'EOF'
          events {
              worker_connections 1024;
          }

          http {
              upstream backend {
                  server backend:8000;
              }

              upstream frontend {
                  server frontend:3000;
              }

              server {
                  listen 80;
                  server_name _;

                  location /api/ {
                      proxy_pass http://backend;
                      proxy_set_header Host $host;
                      proxy_set_header X-Real-IP $remote_addr;
                      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                      proxy_set_header X-Forwarded-Proto $scheme;
                  }

                  location /admin/ {
                      proxy_pass http://backend;
                      proxy_set_header Host $host;
                      proxy_set_header X-Real-IP $remote_addr;
                      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                      proxy_set_header X-Forwarded-Proto $scheme;
                  }

                  location /static/ {
                      alias /app/staticfiles/;
                      expires 1y;
                      add_header Cache-Control "public, immutable";
                  }

                  location /media/ {
                      alias /app/media/;
                      expires 1y;
                      add_header Cache-Control "public";
                  }

                  location / {
                      proxy_pass http://frontend;
                      proxy_set_header Host $host;
                      proxy_set_header X-Real-IP $remote_addr;
                      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                      proxy_set_header X-Forwarded-Proto $scheme;
                  }
              }
          }
          EOF

      - name: Create deployment README
        run: |
          cat > DEPLOYMENT.md << 'EOF'
          # TEA Techniques Deployment

          This repository provides Docker images for the TEA Techniques application.

          ## Quick Start

          1. Pull the latest images:
             ```bash
             docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:latest
             docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:latest
             ```

          2. Use the provided docker-compose.production.yml:
             ```bash
             wget https://raw.githubusercontent.com/${{ github.repository }}/main/docker-compose.production.yml
             docker-compose -f docker-compose.production.yml up -d
             ```

          ## Environment Variables

          ### Backend
          - `SECRET_KEY` (required): Django secret key
          - `DATABASE_URL` (optional): PostgreSQL connection string
          - `ALLOWED_HOSTS` (optional): Comma-separated list of allowed hosts
          - `CORS_ALLOWED_ORIGINS` (optional): Frontend URLs for CORS

          ### Frontend
          - `NEXT_PUBLIC_API_URL` (optional): Backend API URL

          ### Database
          - `POSTGRES_DB`: Database name
          - `POSTGRES_USER`: Database user
          - `POSTGRES_PASSWORD`: Database password

          ## Available Images

          - **Backend**: `${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}`
          - **Frontend**: `${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}`

          ## Tags

          - `latest`: Latest stable release from main branch
          - `v*`: Semantic version releases
          - `main`: Latest development build
          - `pr-*`: Pull request builds (for testing)

          ## Health Checks

          - Backend: `GET /api/techniques/` should return 200
          - Frontend: `GET /` should return the main page

          ## Architecture

          - **Backend**: Django + PostgreSQL
          - **Frontend**: Next.js (static files)
          - **Reverse Proxy**: Nginx
          - **Database**: PostgreSQL 15

          For more information, see the [main repository](https://github.com/${{ github.repository }}).
          EOF

      - name: Upload deployment artifacts
        uses: actions/upload-artifact@v4
        with:
          name: deployment-files
          path: |
            docker-compose.production.yml
            nginx.conf
            DEPLOYMENT.md
          retention-days: 90

  security-scan:
    runs-on: ubuntu-latest
    needs: [build-backend, build-frontend]
    if: github.event_name != 'pull_request'

    steps:
      - name: Run Trivy vulnerability scanner on backend
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:latest
          format: 'sarif'
          output: 'backend-trivy-results.sarif'

      - name: Run Trivy vulnerability scanner on frontend
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:latest
          format: 'sarif'
          output: 'frontend-trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: '.'

  update-deployment-docs:
    runs-on: ubuntu-latest
    needs: [build-backend, build-frontend, build-compose]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Update README with latest image tags
        run: |
          sed -i 's|ghcr.io/.*-backend:.*|ghcr.io/${{ env.IMAGE_NAME_BACKEND }}:latest|g' README.md || true
          sed -i 's|ghcr.io/.*-frontend:.*|ghcr.io/${{ env.IMAGE_NAME_FRONTEND }}:latest|g' README.md || true

      - name: Commit updated documentation
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add README.md || true
          git diff --staged --quiet || git commit -m "Update Docker image references [skip ci]"
          git push || true
