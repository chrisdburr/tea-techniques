/**
 * This file provides a comprehensive test suite plan for the TEA Techniques web application.
 * The tests are organized by component type and functionality.
 */

// Structure:
// 1. Unit Tests - Individual components
// 2. Integration Tests - Component interactions
// 3. API Integration Tests - Data fetching
// 4. End-to-End User Flows

// =====================================================
// 1. UNIT TESTS: Basic Component Rendering
// =====================================================

// src/__tests__/components/ui/button.test.tsx
import { render, screen } from '@testing-library/react'
import userEvent from '@testing-library/user-event'
import { Button } from '@/components/ui/button'

describe('Button Component', () => {
  test('renders correctly with default props', () => {
    render(<Button>Click me</Button>)
    expect(screen.getByRole('button', { name: /click me/i })).toBeInTheDocument()
  })

  test('handles click events', async () => {
    const handleClick = jest.fn()
    render(<Button onClick={handleClick}>Click me</Button>)
    await userEvent.click(screen.getByRole('button', { name: /click me/i }))
    expect(handleClick).toHaveBeenCalledTimes(1)
  })

  test('renders different variants correctly', () => {
    const { rerender } = render(<Button variant="outline">Outline</Button>)
    expect(screen.getByRole('button', { name: /outline/i })).toHaveClass('border')
    
    rerender(<Button variant="destructive">Destructive</Button>)
    expect(screen.getByRole('button', { name: /destructive/i })).toHaveClass('bg-destructive')
  })

  test('supports being disabled', () => {
    render(<Button disabled>Disabled</Button>)
    expect(screen.getByRole('button', { name: /disabled/i })).toBeDisabled()
  })
})

// src/__tests__/components/ui/card.test.tsx
import { render, screen } from '@testing-library/react'
import { Card, CardHeader, CardTitle, CardDescription, CardContent, CardFooter } from '@/components/ui/card'

describe('Card Components', () => {
  test('renders Card with all sub-components', () => {
    render(
      <Card>
        <CardHeader>
          <CardTitle>Card Title</CardTitle>
          <CardDescription>Card Description</CardDescription>
        </CardHeader>
        <CardContent>Content</CardContent>
        <CardFooter>Footer</CardFooter>
      </Card>
    )
    
    expect(screen.getByText('Card Title')).toBeInTheDocument()
    expect(screen.getByText('Card Description')).toBeInTheDocument()
    expect(screen.getByText('Content')).toBeInTheDocument()
    expect(screen.getByText('Footer')).toBeInTheDocument()
  })
})

// src/__tests__/components/layout/Header.test.tsx
import { render, screen } from '@testing-library/react'
import Header from '@/components/layout/Header'
import { DarkModeProvider } from '@/lib/context/dark-mode'

// Mock useRouter
jest.mock('next/navigation', () => ({
  useRouter: () => ({
    push: jest.fn(),
  }),
  useSearchParams: () => ({
    get: jest.fn(),
  }),
}))

describe('Header Component', () => {
  test('renders navigation links', () => {
    render(
      <DarkModeProvider>
        <Header />
      </DarkModeProvider>
    )
    
    expect(screen.getByText('TEA Techniques')).toBeInTheDocument()
    expect(screen.getByText('Categories')).toBeInTheDocument()
    expect(screen.getByText('Browse Techniques')).toBeInTheDocument()
    expect(screen.getByText('About')).toBeInTheDocument()
  })
  
  test('renders dark mode toggle', () => {
    render(
      <DarkModeProvider>
        <Header />
      </DarkModeProvider>
    )
    
    // Look for the button that controls dark mode
    const darkModeButton = screen.getByRole('button', { name: /Switch to Dark Mode|Switch to Light Mode/i })
    expect(darkModeButton).toBeInTheDocument()
  })

  test('mobile menu toggle works', async () => {
    // First, mock window.innerWidth to simulate mobile view
    Object.defineProperty(window, 'innerWidth', { value: 500, writable: true })
    window.dispatchEvent(new Event('resize'))
    
    render(
      <DarkModeProvider>
        <Header />
      </DarkModeProvider>
    )
    
    // Find and click the mobile menu button
    const menuButton = screen.getByRole('button', { name: /toggle menu/i })
    await userEvent.click(menuButton)
    
    // Check if mobile menu is shown
    expect(screen.getByText('Browse Techniques')).toBeVisible()
  })
})

// src/__tests__/components/layout/Footer.test.tsx
import { render, screen } from '@testing-library/react'
import Footer from '@/components/layout/Footer'

describe('Footer Component', () => {
  test('renders app title and links', () => {
    render(<Footer />)
    
    expect(screen.getByText('TEA Techniques Database')).toBeInTheDocument()
    expect(screen.getByText('Categories')).toBeInTheDocument()
    expect(screen.getByText('Browse Techniques')).toBeInTheDocument()
    expect(screen.getByText('About')).toBeInTheDocument()
    expect(screen.getByText('API Documentation')).toBeInTheDocument()
    expect(screen.getByText('GitHub Repository')).toBeInTheDocument()
  })
  
  test('renders copyright info with current year', () => {
    render(<Footer />)
    
    const currentYear = new Date().getFullYear().toString()
    expect(screen.getByText(new RegExp(`Â© ${currentYear} TEA Techniques Database`, 'i'))).toBeInTheDocument()
  })
})

// src/__tests__/components/ui/star-rating.test.tsx
import { render, screen } from '@testing-library/react'
import { StarRating } from '@/components/ui/star-rating'

describe('StarRating Component', () => {
  test('renders correct number of filled stars', () => {
    render(<StarRating rating={3} maxRating={5} />)
    
    // This test is somewhat tricky because of how the stars are rendered
    // Check for filled stars vs empty stars
    const stars = screen.getAllByRole('img', { hidden: true }) // SVG icons are often hidden from screen readers
    
    // You might need to adjust this based on your actual DOM structure
    const filledStars = stars.filter(star => star.className.includes('fill-yellow'))
    const emptyStars = stars.filter(star => !star.className.includes('fill-yellow'))
    
    expect(filledStars).toHaveLength(3)
    expect(emptyStars).toHaveLength(2)
  })
  
  test('handles edge cases for ratings', () => {
    const { rerender } = render(<StarRating rating={0} maxRating={5} />)
    expect(screen.queryAllByTestId('filled-star')).toHaveLength(0)
    
    rerender(<StarRating rating={-1} maxRating={5} />)
    expect(screen.queryAllByTestId('filled-star')).toHaveLength(0)
    
    rerender(<StarRating rating={6} maxRating={5} />)
    expect(screen.queryAllByTestId('filled-star')).toHaveLength(5)
  })
})

// =====================================================
// 2. INTEGRATION TESTS: Component Interactions
// =====================================================

// src/__tests__/components/technique/TechniquesList.test.tsx
import { render, screen, waitFor } from '@testing-library/react'
import TechniquesList from '@/components/technique/TechniquesList'
import { QueryClientProvider, QueryClient } from '@tanstack/react-query'
import * as hooks from '@/lib/api/hooks'

// Mock the hooks used in the TechniquesList component
jest.mock('@/lib/api/hooks', () => ({
  ...jest.requireActual('@/lib/api/hooks'),
  useTechniques: jest.fn(),
  useAssuranceGoals: jest.fn(),
  useCategories: jest.fn(),
}))

describe('TechniquesList Component', () => {
  let queryClient: QueryClient

  beforeEach(() => {
    queryClient = new QueryClient({
      defaultOptions: {
        queries: {
          retry: false,
        },
      },
    })
    
    // Mock the hook results
    jest.spyOn(hooks, 'useTechniques').mockReturnValue({
      data: {
        count: 2,
        results: [
          {
            id: 1,
            name: 'Test Technique 1',
            description: 'Description 1',
            model_dependency: 'Model-Agnostic',
            category_tags: '#category/subcategory',
            assurance_goals: [{ id: 1, name: 'Explainability', description: 'Desc' }],
            categories: [{ id: 1, name: 'Category 1', description: 'Desc', assurance_goal: 1, assurance_goal_name: 'Explainability' }],
            subcategories: [],
            tags: [],
            attribute_values: [],
            resources: [],
            example_use_cases: [],
            limitations: [],
          },
          {
            id: 2,
            name: 'Test Technique 2',
            description: 'Description 2',
            model_dependency: 'Model-Specific',
            category_tags: '#category/subcategory',
            assurance_goals: [{ id: 2, name: 'Fairness', description: 'Desc' }],
            categories: [{ id: 2, name: 'Category 2', description: 'Desc', assurance_goal: 2, assurance_goal_name: 'Fairness' }],
            subcategories: [],
            tags: [],
            attribute_values: [],
            resources: [],
            example_use_cases: [],
            limitations: [],
          },
        ],
      },
      isLoading: false,
      error: null,
    } as any)
    
    jest.spyOn(hooks, 'useAssuranceGoals').mockReturnValue({
      data: {
        results: [
          { id: 1, name: 'Explainability', description: 'Desc' },
          { id: 2, name: 'Fairness', description: 'Desc' },
        ],
      },
      isLoading: false,
      error: null,
    } as any)
    
    jest.spyOn(hooks, 'useCategories').mockReturnValue({
      data: {
        results: [
          { id: 1, name: 'Category 1', description: 'Desc', assurance_goal: 1, assurance_goal_name: 'Explainability' },
          { id: 2, name: 'Category 2', description: 'Desc', assurance_goal: 2, assurance_goal_name: 'Fairness' },
        ],
      },
      isLoading: false,
      error: null,
    } as any)
  })

  test('renders list of techniques', async () => {
    render(
      <QueryClientProvider client={queryClient}>
        <TechniquesList />
      </QueryClientProvider>
    )
    
    await waitFor(() => {
      expect(screen.getByText('Test Technique 1')).toBeInTheDocument()
      expect(screen.getByText('Test Technique 2')).toBeInTheDocument()
    })
  })
  
  test('shows loading state', async () => {
    jest.spyOn(hooks, 'useTechniques').mockReturnValueOnce({
      isLoading: true,
      error: null,
    } as any)
    
    render(
      <QueryClientProvider client={queryClient}>
        <TechniquesList />
      </QueryClientProvider>
    )
    
    expect(screen.getByText(/loading/i)).toBeInTheDocument()
  })
  
  test('shows error state', async () => {
    jest.spyOn(hooks, 'useTechniques').mockReturnValueOnce({
      isLoading: false,
      error: new Error('Failed to fetch techniques'),
    } as any)
    
    render(
      <QueryClientProvider client={queryClient}>
        <TechniquesList />
      </QueryClientProvider>
    )
    
    expect(screen.getByText(/error loading techniques/i)).toBeInTheDocument()
  })
  
  test('filters work correctly', async () => {
    render(
      <QueryClientProvider client={queryClient}>
        <TechniquesList />
      </QueryClientProvider>
    )
    
    // Find and click a filter
    const explainabilityFilter = screen.getByText('Explainability')
    await userEvent.click(explainabilityFilter)
    
    // The useTechniques mock should be called with updated filters
    expect(hooks.useTechniques).toHaveBeenCalledWith(
      expect.objectContaining({ assurance_goals: ['1'] }),
      expect.any(Number)
    )
  })
})

// src/__tests__/components/technique/TechniquesSidebar.test.tsx
import { render, screen } from '@testing-library/react'
import TechniquesSidebar from '@/components/technique/TechniquesSidebar'

describe('TechniquesSidebar Component', () => {
  const mockFilters = {
    search: '',
    assurance_goals: [],
    categories: [],
    model_dependency: [],
    complexity_max: 5,
    computational_cost_max: 5,
  }
  
  const mockGoals = [
    { id: 1, name: 'Explainability', description: 'Desc' },
    { id: 2, name: 'Fairness', description: 'Desc' },
  ]
  
  const mockCategories = [
    { id: 1, name: 'Category 1', description: 'Desc', assurance_goal: 1, assurance_goal_name: 'Explainability' },
    { id: 2, name: 'Category 2', description: 'Desc', assurance_goal: 2, assurance_goal_name: 'Fairness' },
  ]
  
  const mockSetFilters = jest.fn()
  const mockApplyFilters = jest.fn()
  const mockResetFilters = jest.fn()
  const mockSetIsMobileOpen = jest.fn()

  test('renders filter sections correctly', () => {
    render(
      <TechniquesSidebar
        filters={mockFilters}
        setFilters={mockSetFilters}
        applyFilters={mockApplyFilters}
        resetFilters={mockResetFilters}
        assuranceGoals={mockGoals}
        categories={mockCategories}
        isDataLoading={false}
        isMobileOpen={true}
        setIsMobileOpen={mockSetIsMobileOpen}
      />
    )
    
    expect(screen.getByText('Filters')).toBeInTheDocument()
    expect(screen.getByText('Assurance Goals')).toBeInTheDocument()
    expect(screen.getByText('Categories')).toBeInTheDocument()
    expect(screen.getByText('Model Dependency')).toBeInTheDocument()
    expect(screen.getByText('Ratings')).toBeInTheDocument()
  })
  
  test('reset button calls resetFilters', async () => {
    render(
      <TechniquesSidebar
        filters={mockFilters}
        setFilters={mockSetFilters}
        applyFilters={mockApplyFilters}
        resetFilters={mockResetFilters}
        assuranceGoals={mockGoals}
        categories={mockCategories}
        isDataLoading={false}
        isMobileOpen={true}
        setIsMobileOpen={mockSetIsMobileOpen}
      />
    )
    
    const resetButton = screen.getByText('Reset')
    await userEvent.click(resetButton)
    
    expect(mockResetFilters).toHaveBeenCalledTimes(1)
  })
  
  test('filter checkboxes update filter state', async () => {
    render(
      <TechniquesSidebar
        filters={mockFilters}
        setFilters={mockSetFilters}
        applyFilters={mockApplyFilters}
        resetFilters={mockResetFilters}
        assuranceGoals={mockGoals}
        categories={mockCategories}
        isDataLoading={false}
        isMobileOpen={true}
        setIsMobileOpen={mockSetIsMobileOpen}
      />
    )
    
    // Find a goal checkbox
    const explainabilityCheckbox = screen.getByLabelText('Explainability')
    await userEvent.click(explainabilityCheckbox)
    
    // toggleArrayFilter should have been called with the appropriate arguments
    expect(mockApplyFilters).toHaveBeenCalled()
  })
})

// src/__tests__/components/technique/GoalIcon.test.tsx
import { render, screen } from '@testing-library/react'
import GoalIcon from '@/components/technique/GoalIcon'

describe('GoalIcon Component', () => {
  test('renders the correct icon for each goal', () => {
    const goals = ['Explainability', 'Fairness', 'Security', 'Safety', 'Reliability', 'Transparency', 'Privacy']
    
    goals.forEach(goal => {
      const { rerender } = render(<GoalIcon goalName={goal} />)
      
      // Since icons are SVGs, check the presence of an SVG element
      expect(screen.getByRole('img', { hidden: true })).toBeInTheDocument()
      
      rerender(<></>)
    })
  })
  
  test('renders a default icon for unknown goals', () => {
    render(<GoalIcon goalName="Unknown Goal" />)
    
    // Should render the default HelpCircle icon
    expect(screen.getByRole('img', { hidden: true })).toBeInTheDocument()
  })
})

// =====================================================
// 3. API INTEGRATION TESTS
// =====================================================

// src/__tests__/lib/api/hooks.test.tsx
import { renderHook, waitFor } from '@testing-library/react'
import { QueryClientProvider, QueryClient } from '@tanstack/react-query'
import { 
  useTechniques, 
  useTechniqueDetail,
  useAssuranceGoals,
  useCategories 
} from '@/lib/api/hooks'
import { apiClient } from '@/lib/api/client'

// Mock axios client
jest.mock('@/lib/api/client', () => ({
  apiClient: {
    get: jest.fn(),
    post: jest.fn(),
    put: jest.fn(),
    delete: jest.fn(),
  },
}))

describe('API Hooks', () => {
  let queryClient: QueryClient
  let wrapper: React.FC<{ children: React.ReactNode }>
  
  beforeEach(() => {
    queryClient = new QueryClient({
      defaultOptions: {
        queries: {
          retry: false,
        },
      },
    })
    
    wrapper = ({ children }) => (
      <QueryClientProvider client={queryClient}>
        {children}
      </QueryClientProvider>
    )
    
    jest.clearAllMocks()
  })
  
  test('useTechniques fetches techniques successfully', async () => {
    const mockData = {
      count: 2,
      results: [
        { id: 1, name: 'Technique 1' },
        { id: 2, name: 'Technique 2' },
      ],
    }
    
    // Mock the API response
    jest.spyOn(apiClient, 'get').mockResolvedValue({ data: mockData })
    
    const { result } = renderHook(() => useTechniques(), { wrapper })
    
    // Initially loading
    expect(result.current.isLoading).toBe(true)
    
    // Wait for data to resolve
    await waitFor(() => expect(result.current.isLoading).toBe(false))
    
    // Check data is returned correctly
    expect(result.current.data).toEqual(mockData)
    
    // Verify API called with correct parameters
    expect(apiClient.get).toHaveBeenCalled()
  })
  
  test('useTechniqueDetail fetches technique details', async () => {
    const mockTechnique = {
      id: 1,
      name: 'Technique 1',
      description: 'Description 1',
      // ... other technique properties
    }
    
    jest.spyOn(apiClient, 'get').mockResolvedValue({ data: mockTechnique })
    
    const { result } = renderHook(() => useTechniqueDetail(1), { wrapper })
    
    await waitFor(() => expect(result.current.isLoading).toBe(false))
    
    expect(result.current.data).toEqual(mockTechnique)
    expect(apiClient.get).toHaveBeenCalledWith('/api/techniques/1')
  })
  
  test('useTechniqueDetail handles errors correctly', async () => {
    jest.spyOn(apiClient, 'get').mockRejectedValue(new Error('Network error'))
    
    const { result } = renderHook(() => useTechniqueDetail(1), { wrapper })
    
    await waitFor(() => expect(result.current.isLoading).toBe(false))
    
    expect(result.current.error).toBeTruthy()
    expect(apiClient.get).toHaveBeenCalledWith('/api/techniques/1')
  })
})

// =====================================================
// 4. PAGE COMPONENT TESTS
// =====================================================

// src/__tests__/app/page.test.tsx
import { render, screen } from '@testing-library/react'
import HomePage from '@/app/page'

// Mock hooks and next/navigation as needed
jest.mock('next/navigation', () => ({
  useRouter: () => ({
    push: jest.fn(),
  }),
  useSearchParams: () => ({
    get: jest.fn(),
  }),
}))

describe('Home Page', () => {
  test('renders hero section', () => {
    render(<HomePage />)
    
    expect(screen.getByText('TEA Techniques Database')).toBeInTheDocument()
    expect(screen.getByText(/A platform for exploring techniques/i)).toBeInTheDocument()
    expect(screen.getByRole('link', { name: /Explore Techniques/i })).toBeInTheDocument()
  })
  
  test('renders feature section', () => {
    render(<HomePage />)
    
    expect(screen.getByText('Key Features')).toBeInTheDocument()
    expect(screen.getByText('Structured Documentation')).toBeInTheDocument()
    expect(screen.getByText('Searchable Database')).toBeInTheDocument()
    expect(screen.getByText('Open Platform')).toBeInTheDocument()
  })
  
  test('renders call to action section', () => {
    render(<HomePage />)
    
    expect(screen.getByText('Ready to get started?')).toBeInTheDocument()
    expect(screen.getByRole('link', { name: /Explore Techniques/i })).toBeInTheDocument()
  })
})

// src/__tests__/app/techniques/[id]/page.test.tsx
import { render, screen, waitFor } from '@testing-library/react'
import TechniqueDetailPage from '@/app/techniques/[id]/page'
import * as hooks from '@/lib/api/hooks'

// Mock useParams
jest.mock('next/navigation', () => ({
  useParams: () => ({ id: '1' }),
  useRouter: () => ({
    push: jest.fn(),
  }),
  useSearchParams: () => ({
    get: jest.fn(),
  }),
}))

// Mock hooks
jest.mock('@/lib/api/hooks', () => ({
  useTechniqueDetail: jest.fn(),
}))

describe('Technique Detail Page', () => {
  beforeEach(() => {
    jest.clearAllMocks()
  })
  
  test('renders technique details correctly', async () => {
    const mockTechnique = {
      id: 1,
      name: 'Test Technique',
      description: 'This is a test technique description',
      model_dependency: 'Model-Agnostic',
      category_tags: '#category/subcategory',
      assurance_goals: [{ id: 1, name: 'Explainability', description: 'Desc' }],
      categories: [{ id: 1, name: 'Category 1', description: 'Desc', assurance_goal: 1, assurance_goal_name: 'Explainability' }],
      subcategories: [],
      tags: [],
      attribute_values: [],
      resources: [],
      example_use_cases: [],
      limitations: [],
    }
    
    jest.spyOn(hooks, 'useTechniqueDetail').mockReturnValue({
      data: mockTechnique,
      isLoading: false,
      error: null,
    } as any)
    
    render(<TechniqueDetailPage />)
    
    expect(screen.getByText('Test Technique')).toBeInTheDocument()
    expect(screen.getByText('This is a test technique description')).toBeInTheDocument()
    expect(screen.getByText('Model-Agnostic')).toBeInTheDocument()
    expect(screen.getByText('Explainability')).toBeInTheDocument()
  })
  
  test('shows loading state', async () => {
    jest.spyOn(hooks, 'useTechniqueDetail').mockReturnValue({
      isLoading: true,
      error: null,
    } as any)
    
    render(<TechniqueDetailPage />)
    
    expect(screen.getByText(/loading technique details/i)).toBeInTheDocument()
  })
  
  test('shows error state', async () => {
    jest.spyOn(hooks, 'useTechniqueDetail').mockReturnValue({
      isLoading: false,
      error: new Error('Failed to fetch technique'),
      data: null,
    } as any)
    
    render(<TechniqueDetailPage />)
    
    expect(screen.getByText(/Error Loading Technique/i)).toBeInTheDocument()
  })
})

// =====================================================
// 5. END-TO-END TESTING: Full User Flows
// =====================================================

/**
 * For end-to-end tests, consider using Cypress or Playwright
 * to test full user flows in a real browser environment.
 * 
 * Example E2E tests might include:
 * 
 * 1. Navigating from home to techniques page
 * 2. Applying filters and seeing filtered results
 * 3. Viewing technique details and navigating back
 * 4. Using pagination to browse techniques
 * 5. Testing dark mode toggle functionality
 * 
 * Below is a Cypress test example (you would need to install Cypress first)
 */

// cypress/e2e/browse-techniques.cy.ts
/*
describe('Browse Techniques', () => {
  it('should navigate to techniques page and apply filters', () => {
    // Visit the home page
    cy.visit('/')
    
    // Click on "Explore Techniques" button
    cy.contains('Explore Techniques').click()
    
    // Verify we're on the techniques page
    cy.url().should('include', '/techniques')
    
    // Open the filter sidebar if needed
    cy.get('[aria-label="Show filters"]').click()
    
    // Apply a filter (e.g., select "Explainability")
    cy.contains('Explainability').click()
    
    // Verify URL contains the filter
    cy.url().should('include', 'assurance_goals=')
    
    // Verify filtered results
    cy.get('[data-testid="technique-card"]').should('exist')
    
    // Click on a technique to view details
    cy.get('[data-testid="technique-card"]').first().click()
    
    // Verify we're on the detail page
    cy.url().should('match', /\/techniques\/\d+/)
    
    // Verify technique details are displayed
    cy.contains('Technique Attributes').should('be.visible')
  })
})
*/

// Testing context providers
// src/__tests__/lib/context/dark-mode.test.tsx
import { render, screen } from '@testing-library/react'
import { DarkModeProvider, useDarkMode, DarkModeToggle } from '@/lib/context/dark-mode'

// Create a test component that uses the dark mode context
const TestComponent = () => {
  const { isDarkMode, toggleDarkMode } = useDarkMode()
  return (
    <div>
      <span>Dark Mode: {isDarkMode ? 'On' : 'Off'}</span>
      <button onClick={toggleDarkMode}>Toggle</button>
    </div>
  )
}

describe('Dark Mode Context', () => {
  beforeEach(() => {
    // Mock localStorage
    Object.defineProperty(window, 'localStorage', {
      value: {
        getItem: jest.fn(),
        setItem: jest.fn(),
      },
      writable: true,
    })
    
    // Mock matchMedia
    Object.defineProperty(window, 'matchMedia', {
      value: jest.fn().mockImplementation(query => ({
        matches: false,
        media: query,
        onchange: null,
        addListener: jest.fn(),
        removeListener: jest.fn(),
        addEventListener: jest.fn(),
        removeEventListener: jest.fn(),
        dispatchEvent: jest.fn(),
      })),
      writable: true,
    })
    
    // Mock document.documentElement
    Object.defineProperty(document, 'documentElement', {
      value: {
        classList: {
          add: jest.fn(),
          remove: jest.fn(),
        },
      },
      writable: true,
    })
  })
  
  test('provides dark mode context to children', async () => {
    render(
      <DarkModeProvider>
        <TestComponent />
      </DarkModeProvider>
    )
    
    // Initially dark mode should be off (default)
    expect(screen.getByText('Dark Mode: Off')).toBeInTheDocument()
    
    // Toggle dark mode
    await userEvent.click(screen.getByText('Toggle'))
    
    // Now dark mode should be on
    expect(screen.getByText('Dark Mode: On')).toBeInTheDocument()
    
    // Check if localStorage was called with the correct values
    expect(localStorage.setItem).toHaveBeenCalledWith('darkMode', 'true')
    
    // Check if the class was added to the document element
    expect(document.documentElement.classList.add).toHaveBeenCalledWith('dark')
  })
  
  test('DarkModeToggle component works correctly', async () => {
    render(
      <DarkModeProvider>
        <DarkModeToggle />
      </DarkModeProvider>
    )
    
    // Find the toggle button
    const toggleButton = screen.getByRole('button')
    expect(toggleButton).toBeInTheDocument()
    
    // Initially should show the moon icon (for light mode)
    expect(toggleButton.querySelector('svg')).toBeInTheDocument()
    
    // Click the toggle
    await userEvent.click(toggleButton)
    
    // Now should show the sun icon (for dark mode)
    expect(toggleButton.querySelector('svg')).toBeInTheDocument()
    
    // Check if the class was added to the document element
    expect(document.documentElement.classList.add).toHaveBeenCalledWith('dark')
  })
})