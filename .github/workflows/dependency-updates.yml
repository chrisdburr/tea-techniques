name: Dependency Updates

on:
  schedule:
    # Run weekly on Monday at 9 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch: # Allow manual triggering

env:
  PYTHON_VERSION: "3.11"
  POETRY_VERSION: "1.8.0"
  NODE_VERSION: "18"
  PNPM_VERSION: "10.6.5"

jobs:
  update-python-dependencies:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Update Python dependencies
      working-directory: backend
      run: |
        # Update dependencies to latest compatible versions
        poetry update
        
        # Show what was updated
        poetry show --outdated || echo "All packages are up to date"

    - name: Create Pull Request for Python dependencies
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: "chore: update Python dependencies"
        title: "ðŸ”„ Update Python Dependencies"
        body: |
          ## Automated Python Dependency Update
          
          This PR updates Python dependencies to their latest compatible versions using Poetry.
          
          ### Changes
          - Updated backend dependencies using `poetry update`
          - Updated poetry.lock file with new dependency versions
          
          ### Next Steps
          - [ ] Review the changes
          - [ ] Ensure all tests pass
          - [ ] Check for any breaking changes in updated packages
          - [ ] Test the application locally
          
          **Note: This PR was created automatically by the dependency update workflow.**
        branch: chore/update-python-dependencies
        delete-branch: true
        labels: |
          dependencies
          python
          automated

  update-node-dependencies:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install pnpm
      uses: pnpm/action-setup@v4
      with:
        version: ${{ env.PNPM_VERSION }}

    - name: Update Node.js dependencies
      working-directory: frontend
      run: |
        # Update dependencies to latest compatible versions
        pnpm update --latest
        
        # Show what was updated
        pnpm outdated || echo "All packages are up to date"

    - name: Create Pull Request for Node.js dependencies
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: "chore: update Node.js dependencies"
        title: "ðŸ”„ Update Node.js Dependencies"
        body: |
          ## Automated Node.js Dependency Update
          
          This PR updates Node.js dependencies to their latest compatible versions using pnpm.
          
          ### Changes
          - Updated frontend dependencies using `pnpm update --latest`
          - Updated pnpm-lock.yaml with new dependency versions
          
          ### Next Steps
          - [ ] Review the changes
          - [ ] Ensure all tests pass
          - [ ] Check for any breaking changes in updated packages
          - [ ] Test the application locally
          - [ ] Verify build process works correctly
          
          **Note: This PR was created automatically by the dependency update workflow.**
        branch: chore/update-node-dependencies
        delete-branch: true
        labels: |
          dependencies
          nodejs
          automated

  security-audit:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install pnpm
      uses: pnpm/action-setup@v4
      with:
        version: ${{ env.PNPM_VERSION }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Install Python dependencies
      working-directory: backend
      run: poetry install --no-interaction --no-ansi

    - name: Install Node.js dependencies
      working-directory: frontend
      run: pnpm install --frozen-lockfile

    - name: Python security audit
      working-directory: backend
      run: |
        poetry run safety check --json --output safety-report.json || true
        poetry run safety check

    - name: Node.js security audit
      working-directory: frontend
      run: |
        pnpm audit --json > npm-audit.json || true
        pnpm audit

    - name: Upload security audit results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-audit-results
        path: |
          backend/safety-report.json
          frontend/npm-audit.json
        retention-days: 30

    - name: Create security issue if vulnerabilities found
      if: failure()
      uses: actions/github-script@v7
      with:
        script: |
          const title = 'ðŸš¨ Security Vulnerabilities Detected';
          const body = `
          ## Security Audit Report
          
          The automated security audit has detected potential vulnerabilities in the project dependencies.
          
          ### Action Required
          - [ ] Review the uploaded security audit results
          - [ ] Update vulnerable dependencies using \`poetry update\` (backend) or \`pnpm update\` (frontend)
          - [ ] Test the application after updates
          - [ ] Close this issue once vulnerabilities are resolved
          
          ### Artifacts
          Check the workflow run artifacts for detailed security reports:
          - Python: safety-report.json
          - Node.js: npm-audit.json
          
          **Commands to fix:**
          - Backend: \`cd backend && poetry update [package-name]\`
          - Frontend: \`cd frontend && pnpm update [package-name]\`
          
          **Note: This issue was created automatically by the security audit workflow.**
          `;
          
          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: title,
            body: body,
            labels: ['security', 'vulnerability', 'automated']
          });