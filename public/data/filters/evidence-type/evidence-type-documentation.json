{
  "tag": {
    "name": "evidence-type/documentation",
    "slug": "evidence-type-documentation",
    "count": 5,
    "category": "evidence-type"
  },
  "techniques": [
    {
      "slug": "model-cards",
      "name": "Model Cards",
      "description": "Model cards are standardised documentation frameworks that systematically document machine learning models through structured templates. The templates cover intended use cases, performance metrics across different demographic groups and operating conditions, training data characteristics, evaluation procedures, limitations, and ethical considerations. They serve as comprehensive technical specifications that enable informed model selection, prevent inappropriate deployment, support regulatory compliance, and facilitate fair assessment by providing transparent reporting of model capabilities and constraints across diverse populations and scenarios.",
      "assurance_goals": [
        "Transparency",
        "Fairness",
        "Safety"
      ],
      "tags": [
        "applicable-models/agnostic",
        "assurance-goal-category/transparency",
        "assurance-goal-category/transparency/documentation/model-card",
        "assurance-goal-category/fairness",
        "assurance-goal-category/safety",
        "data-requirements/access-to-training-data",
        "data-requirements/sensitive-attributes",
        "data-type/any",
        "evidence-type/documentation",
        "expertise-needed/ml-engineering",
        "expertise-needed/regulatory-compliance",
        "expertise-needed/statistics",
        "lifecycle-stage/model-development",
        "lifecycle-stage/system-deployment-and-use",
        "technique-type/documentation"
      ],
      "example_use_cases": [
        {
          "description": "Documenting a medical diagnosis AI with detailed performance metrics across different patient demographics, age groups, and clinical conditions, enabling healthcare providers to understand when the model should be trusted and when additional expert consultation is needed for patient safety.",
          "goal": "Safety"
        },
        {
          "description": "Creating comprehensive model cards for hiring algorithms that transparently report performance differences across demographic groups, helping HR departments identify potential bias issues and ensure equitable candidate evaluation processes.",
          "goal": "Fairness"
        },
        {
          "description": "Publishing detailed model documentation for a credit scoring API that clearly describes training data sources, evaluation methodologies, and performance limitations, enabling financial institutions to make informed decisions about model deployment and regulatory compliance.",
          "goal": "Transparency"
        }
      ],
      "limitations": [
        {
          "description": "Creating comprehensive model cards requires substantial time, expertise, and resources to gather performance data across diverse conditions and demographic groups, potentially delaying model deployment timelines."
        },
        {
          "description": "Information can become outdated quickly as models are retrained, updated, or deployed in new contexts, requiring ongoing maintenance and version control to remain accurate and useful."
        },
        {
          "description": "Organisations may provide incomplete or superficial documentation to avoid revealing competitive advantages or potential liabilities, undermining the transparency goals of model cards."
        },
        {
          "description": "Lack of standardised formats and enforcement mechanisms means model card quality and completeness vary significantly across different organisations and use cases."
        },
        {
          "description": "Technical complexity of documenting model behaviour across all relevant dimensions may exceed the expertise of some development teams, leading to gaps in critical information."
        }
      ],
      "resources": [
        {
          "title": "Model Cards for Model Reporting",
          "url": "http://arxiv.org/pdf/1810.03993v2",
          "source_type": "technical_paper",
          "authors": [
            "Margaret Mitchell",
            "Simone Wu",
            "Andrew Zaldivar",
            "Parker Barnes",
            "Lucy Vasserman",
            "Ben Hutchinson",
            "Elena Spitzer",
            "Inioluwa Deborah Raji",
            "Timnit Gebru"
          ],
          "publication_date": "2018-10-05",
          "description": "Foundational paper introducing model cards as a framework for transparent model reporting and responsible AI documentation"
        },
        {
          "title": "Model Card Guidebook",
          "url": "https://huggingface.co/docs/hub/en/model-card-guidebook",
          "source_type": "tutorial",
          "description": "Comprehensive guide providing updated model card templates, creator tools, and practical insights for implementing model documentation across diverse stakeholder needs"
        },
        {
          "title": "scikit-learn model cards documentation",
          "url": "https://skops.readthedocs.io/en/stable/auto_examples/plot_model_card.html",
          "source_type": "tutorial",
          "description": "Practical tutorial demonstrating how to create comprehensive model cards for scikit-learn models using the skops library with metrics, visualisations, and metadata"
        }
      ],
      "complexity_rating": 2,
      "computational_cost_rating": 1,
      "related_techniques": [
        "datasheets-for-datasets",
        "data-version-control",
        "automated-documentation-generation"
      ]
    },
    {
      "slug": "datasheets-for-datasets",
      "name": "Datasheets for Datasets",
      "description": "Datasheets for datasets establish comprehensive documentation standards for datasets, systematically recording creation methodology, data composition, collection procedures, preprocessing transformations, intended applications, potential biases, privacy considerations, and maintenance protocols. These structured documents enhance dataset transparency by providing essential context for appropriate usage, enabling informed decisions about dataset suitability for specific tasks, supporting bias detection and mitigation efforts, ensuring compliance with data protection regulations, and promoting responsible data stewardship throughout the entire data lifecycle from collection to disposal.",
      "assurance_goals": [
        "Transparency",
        "Fairness",
        "Privacy"
      ],
      "tags": [
        "applicable-models/agnostic",
        "assurance-goal-category/transparency",
        "assurance-goal-category/fairness",
        "assurance-goal-category/privacy",
        "data-requirements/no-special-requirements",
        "data-type/any",
        "evidence-type/documentation",
        "expertise-needed/domain-knowledge",
        "expertise-needed/regulatory-compliance",
        "lifecycle-stage/data-handling",
        "lifecycle-stage/data-handling/collection",
        "lifecycle-stage/data-handling/preparation",
        "technique-type/documentation"
      ],
      "example_use_cases": [
        {
          "description": "Documenting a medical imaging dataset with detailed information about patient privacy protections, anonymisation procedures, and data sharing constraints to ensure sensitive health information is handled appropriately and regulatory compliance is maintained.",
          "goal": "Privacy"
        },
        {
          "description": "Creating comprehensive datasheets for recruitment datasets that document demographic representation across different job categories, helping developers identify potential bias in training data and develop more equitable hiring algorithms.",
          "goal": "Fairness"
        },
        {
          "description": "Establishing transparent documentation for financial transaction datasets that clearly describes data collection methodology, preprocessing steps, and intended use cases, enabling researchers to make informed decisions about dataset appropriateness for their specific applications.",
          "goal": "Transparency"
        }
      ],
      "limitations": [
        {
          "description": "Creating thorough datasheets requires significant time investment and domain expertise to properly document collection methods, biases, and ethical considerations, potentially delaying dataset release or publication."
        },
        {
          "description": "Information may become outdated as datasets undergo preprocessing, cleaning, or augmentation, requiring ongoing maintenance to ensure documentation accuracy throughout the data lifecycle."
        },
        {
          "description": "Absence of standardised templates and enforcement mechanisms leads to inconsistent documentation quality and completeness across different organisations and research communities."
        },
        {
          "description": "Dataset creators may intentionally omit sensitive information about collection methods, participant consent, or potential biases to avoid legal liability or competitive disadvantage."
        },
        {
          "description": "Limited adoption and awareness means many existing datasets lack proper documentation, creating gaps in the historical record and making legacy dataset assessment difficult."
        }
      ],
      "resources": [
        {
          "title": "Datasheets for Datasets",
          "url": "https://arxiv.org/abs/1803.09010",
          "source_type": "technical_paper",
          "authors": [
            "Timnit Gebru",
            "Jamie Morgenstern",
            "Briana Vecchione",
            "Jennifer Wortman Vaughan",
            "Hanna Wallach",
            "Hal Daum√© III",
            "Kate Crawford"
          ],
          "publication_date": "2018-03-23",
          "description": "Foundational paper proposing standardised documentation for machine learning datasets to facilitate transparency, accountability, and better communication between dataset creators and consumers"
        },
        {
          "title": "Datasheets for AI and medical datasets (DAIMS): a data validation and documentation framework before machine learning analysis in medical research",
          "url": "http://arxiv.org/pdf/2501.14094v1",
          "source_type": "technical_paper",
          "authors": [
            "Ramtin Zargari Marandi",
            "Anne Svane Frahm",
            "Maja Milojevic"
          ],
          "publication_date": "2025-01-23",
          "description": "Recent framework extending datasheets specifically for medical AI datasets, providing validation and documentation standards for healthcare machine learning research"
        },
        {
          "title": "MT-Adapted Datasheets for Datasets: Template and Repository",
          "url": "http://arxiv.org/pdf/2005.13156v1",
          "source_type": "technical_paper",
          "authors": [
            "Marta R. Costa-juss√†",
            "Roger Creus",
            "Oriol Domingo",
            "Albert Dom√≠nguez",
            "Miquel Escobar",
            "Cayetana L√≥pez",
            "Marina Garcia",
            "Margarita Geleta"
          ],
          "publication_date": "2020-05-27"
        },
        {
          "title": "Understanding Machine Learning Practitioners' Data Documentation Perceptions, Needs, Challenges, and Desiderata",
          "url": "http://arxiv.org/pdf/2206.02923v2",
          "source_type": "technical_paper",
          "authors": [
            "Amy K. Heger",
            "Liz B. Marquis",
            "Mihaela Vorvoreanu",
            "Hanna Wallach",
            "Jennifer Wortman Vaughan"
          ],
          "publication_date": "2022-06-06"
        }
      ],
      "complexity_rating": 2,
      "computational_cost_rating": 1,
      "related_techniques": [
        "model-cards",
        "mlflow-experiment-tracking",
        "data-version-control",
        "automated-documentation-generation"
      ]
    },
    {
      "slug": "mlflow-experiment-tracking",
      "name": "MLflow Experiment Tracking",
      "description": "MLflow is an open-source platform that tracks machine learning experiments by automatically logging parameters, metrics, models, and artifacts throughout the ML lifecycle. It provides a centralised repository for comparing different experimental runs, reproducing results, and managing model versions. Teams can track hyperparameters, evaluation metrics, model files, and execution environment details, creating a comprehensive audit trail that supports collaboration, reproducibility, and regulatory compliance across the entire machine learning development process.",
      "assurance_goals": [
        "Transparency",
        "Reliability"
      ],
      "tags": [
        "applicable-models/agnostic",
        "assurance-goal-category/transparency",
        "assurance-goal-category/reliability",
        "data-requirements/no-special-requirements",
        "data-type/any",
        "evidence-type/documentation",
        "expertise-needed/ml-engineering",
        "expertise-needed/software-engineering",
        "lifecycle-stage/model-development",
        "lifecycle-stage/system-deployment-and-use",
        "technique-type/process"
      ],
      "example_use_cases": [
        {
          "description": "Tracking medical diagnosis model experiments across different hospitals, logging hyperparameters, performance metrics, and model artifacts to ensure reproducible research and enable regulatory audits of model development processes.",
          "goal": "Transparency"
        },
        {
          "description": "Managing fraud detection model versions in production, tracking which specific model configuration and training data version is deployed, enabling quick rollback and performance comparison when system reliability issues arise.",
          "goal": "Reliability"
        },
        {
          "description": "Documenting loan approval model experiments with complete parameter tracking and performance logging across demographic groups, supporting fair lending compliance by providing transparent records of model development and validation processes.",
          "goal": "Transparency"
        }
      ],
      "limitations": [
        {
          "description": "Requires teams to adopt disciplined logging practices and may introduce overhead to development workflows if not properly integrated into existing processes."
        },
        {
          "description": "Storage costs can grow substantially with extensive artifact logging, especially for large models or high-frequency experimentation."
        },
        {
          "description": "Tracking quality depends on developers consistently logging relevant information, with incomplete logging leading to gaps in experimental records."
        },
        {
          "description": "Complex multi-stage pipelines may require custom instrumentation to capture dependencies and data flow relationships effectively."
        },
        {
          "description": "Security and access control configurations require careful setup to protect sensitive model information and experimental data in shared environments."
        }
      ],
      "resources": [
        {
          "title": "MLflow Documentation",
          "url": "https://mlflow.org/docs/latest/index.html",
          "source_type": "documentation",
          "description": "Comprehensive official documentation covering MLflow setup, tracking APIs, model management, and deployment workflows with examples and best practices"
        },
        {
          "title": "mlflow/mlflow",
          "url": "https://github.com/mlflow/mlflow",
          "source_type": "software_package",
          "description": "Official MLflow open-source repository containing the complete platform for ML experiment tracking, model management, and deployment"
        },
        {
          "title": "An MLOps Framework for Explainable Network Intrusion Detection with MLflow",
          "url": "https://ieeexplore.ieee.org/abstract/document/10733700",
          "source_type": "technical_paper",
          "authors": [
            "Vincenzo Spadari",
            "Francesco Cerasuolo",
            "Giampaolo Bovenzi",
            "Antonio Pescap√®"
          ],
          "publication_date": "2024-06-26",
          "description": "Research paper demonstrating MLflow framework application for managing machine learning pipelines in network intrusion detection, covering experiment tracking, model deployment, and monitoring across security datasets"
        },
        {
          "title": "MLflow Tutorial - Machine Learning Lifecycle Management",
          "url": "https://www.mlflow.org/docs/latest/tutorials-and-examples/tutorial.html",
          "source_type": "tutorial",
          "description": "Step-by-step tutorial demonstrating MLflow experiment tracking, model packaging, and deployment using real machine learning examples"
        }
      ],
      "complexity_rating": 2,
      "computational_cost_rating": 2,
      "related_techniques": [
        "model-cards",
        "datasheets-for-datasets",
        "data-version-control",
        "automated-documentation-generation"
      ]
    },
    {
      "slug": "data-version-control",
      "name": "Data Version Control",
      "description": "Data Version Control (DVC) is a Git-like version control system specifically designed for machine learning data, models, and experiments. It tracks changes to large data files, maintains reproducible ML pipelines, and creates a complete audit trail of data transformations, model training, and evaluation processes. DVC works alongside Git to provide end-to-end lineage tracking from raw data through preprocessing, training, and deployment, enabling teams to reproduce any model version and understand exactly how datasets evolved throughout the ML lifecycle.",
      "assurance_goals": [
        "Transparency",
        "Reliability"
      ],
      "tags": [
        "applicable-models/agnostic",
        "assurance-goal-category/transparency",
        "assurance-goal-category/reliability",
        "data-requirements/no-special-requirements",
        "data-type/any",
        "evidence-type/documentation",
        "expertise-needed/software-engineering",
        "expertise-needed/ml-engineering",
        "lifecycle-stage/data-handling",
        "lifecycle-stage/model-development",
        "lifecycle-stage/system-deployment-and-use",
        "technique-type/process"
      ],
      "example_use_cases": [
        {
          "description": "Tracking medical imaging dataset versions and model training pipelines to ensure reproducible research results, enabling hospitals to verify which specific data version and preprocessing steps were used for regulatory submissions.",
          "goal": "Transparency"
        },
        {
          "description": "Managing credit scoring model data pipelines with complete version control of training datasets, feature engineering steps, and model artifacts, ensuring reliable model reproduction and rollback capabilities when performance issues arise.",
          "goal": "Reliability"
        },
        {
          "description": "Maintaining pharmaceutical drug discovery data lineage across multiple research teams, tracking compound datasets, feature extraction processes, and model versions to support FDA submissions with complete experimental provenance.",
          "goal": "Transparency"
        }
      ],
      "limitations": [
        {
          "description": "Requires learning Git-like workflows and CLI commands, which may have a steep learning curve for teams unfamiliar with version control systems."
        },
        {
          "description": "Storage costs can be substantial for large datasets with frequent changes, especially when maintaining multiple versions and branches of data."
        },
        {
          "description": "Complex data pipelines with many interdependencies may require significant setup time and careful configuration to track properly."
        },
        {
          "description": "Performance can degrade with very large files or datasets due to checksumming and synchronisation overhead during operations."
        },
        {
          "description": "Team coordination becomes essential as improper branch management or merge conflicts can disrupt collaborative workflows."
        }
      ],
      "resources": [
        {
          "title": "DVC Documentation",
          "url": "https://dvc.org/doc",
          "source_type": "documentation",
          "description": "Comprehensive official documentation covering DVC installation, data versioning, pipeline creation, and collaborative workflows with tutorials and best practices"
        },
        {
          "title": "iterative/dvc",
          "url": "https://github.com/iterative/dvc",
          "source_type": "software_package",
          "description": "Official DVC open-source repository containing the complete data version control system for machine learning with Git integration"
        },
        {
          "title": "DVC Tutorial - Data Version Control for Machine Learning",
          "url": "https://dvc.org/doc/start",
          "source_type": "tutorial",
          "description": "Step-by-step getting started guide demonstrating DVC basics including data tracking, pipeline creation, and experiment management"
        }
      ],
      "complexity_rating": 3,
      "computational_cost_rating": 2,
      "acronym": "DVC",
      "related_techniques": [
        "model-cards",
        "datasheets-for-datasets",
        "mlflow-experiment-tracking",
        "automated-documentation-generation"
      ]
    },
    {
      "slug": "automated-documentation-generation",
      "name": "Automated Documentation Generation",
      "description": "Automated documentation generation creates and maintains up-to-date documentation using various methods including programmatic scripts, large language models (LLMs), and extraction tools. These approaches can capture model architectures, data schemas, feature importance, performance metrics, API specifications, and lineage information without manual writing. Methods range from traditional code parsing and template-based generation to modern AI-assisted documentation that can understand context and generate human-readable explanations.",
      "assurance_goals": [
        "Transparency",
        "Reliability"
      ],
      "tags": [
        "applicable-models/agnostic",
        "assurance-goal-category/transparency",
        "assurance-goal-category/transparency/documentation",
        "assurance-goal-category/reliability",
        "data-requirements/no-special-requirements",
        "data-type/any",
        "evidence-type/documentation",
        "expertise-needed/software-engineering",
        "lifecycle-stage/project-design",
        "lifecycle-stage/model-development",
        "lifecycle-stage/deployment",
        "technique-type/algorithmic"
      ],
      "example_use_cases": [
        {
          "description": "Automatically generating comprehensive model cards for a healthcare AI system each time a new version is deployed, including updated performance metrics across demographic groups, data lineage information, and bias evaluation results for regulatory compliance documentation.",
          "goal": "Transparency"
        },
        {
          "description": "Using LLM-powered tools to automatically document complex financial risk models by analysing code, extracting business logic, and generating human-readable explanations of model behaviour for audit trails and stakeholder communication.",
          "goal": "Transparency"
        },
        {
          "description": "Implementing automated API documentation generation for a machine learning platform that extracts endpoint specifications, parameter definitions, and usage examples, ensuring documentation stays synchronised with code changes and reducing deployment errors from outdated documentation.",
          "goal": "Reliability"
        }
      ],
      "limitations": [
        {
          "description": "AI-generated documentation may miss critical domain context and business logic that human experts would include, potentially leading to incomplete or misleading explanations of model behaviour."
        },
        {
          "description": "Template-based approaches often struggle with unstructured information and complex relationships between code components, limiting their ability to capture nuanced system interactions."
        },
        {
          "description": "Quality heavily depends on code quality and instrumentation comprehensiveness; poorly commented or documented source code will result in inadequate generated documentation."
        },
        {
          "description": "Maintenance overhead can be significant as automated systems require configuration updates when code structures change, and generated content may need human review for accuracy and completeness."
        },
        {
          "description": "LLM-based approaches may introduce hallucinations or inaccuracies, particularly when documenting complex technical details or domain-specific terminology without proper validation mechanisms."
        }
      ],
      "resources": [
        {
          "title": "daynin/fundoc",
          "url": "https://github.com/daynin/fundoc",
          "source_type": "software_package",
          "description": "Language-agnostic documentation generator written in Rust that enables keeping documentation synchronised with code across multiple file types and programming languages."
        },
        {
          "title": "Generative AI for Software Development - DeepLearning.AI",
          "url": "https://www.deeplearning.ai/courses/generative-ai-for-software-development/",
          "source_type": "tutorial",
          "description": "Comprehensive course covering AI-powered documentation techniques including LLM-assisted documentation generation, formatting for automated tools, and improving code documentation quality."
        },
        {
          "title": "Documentation Generator Analysis ‚Äî Wiser Documentation",
          "url": "https://chiplicity.readthedocs.io/en/latest/On_Software/DocumentationGenerator.html",
          "source_type": "documentation",
          "description": "Detailed analysis and comparison of documentation generator tools including Sphinx, Doxygen, and other approaches for automated documentation workflows."
        },
        {
          "title": "pyTooling/sphinx-reports",
          "url": "https://github.com/pyTooling/sphinx-reports",
          "source_type": "software_package",
          "description": "Sphinx extension that automatically integrates software development reports (unit tests, coverage, documentation coverage) into documentation as appendix pages."
        }
      ],
      "complexity_rating": 3,
      "computational_cost_rating": 2,
      "related_techniques": [
        "model-cards",
        "datasheets-for-datasets",
        "data-version-control"
      ]
    }
  ],
  "count": 5
}