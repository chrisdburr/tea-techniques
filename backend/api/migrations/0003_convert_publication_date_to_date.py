# Generated by Django 5.1.6 on 2025-04-04 07:36

import datetime
import re
from django.db import migrations


def parse_date(date_str):
    """Parse a date string into a Python date object."""
    if not date_str or not isinstance(date_str, str) or not date_str.strip():
        return None
        
    date_str = date_str.strip()
    
    # Try different date formats
    formats = [
        "%Y-%m-%d",       # 2023-01-15
        "%d/%m/%Y",       # 15/01/2023
        "%m/%d/%Y",       # 01/15/2023
        "%B %d, %Y",      # January 15, 2023
        "%d %B %Y",       # 15 January 2023
        "%Y",             # 2023 (just year)
        "%B %Y",          # January 2023
        "%m-%Y",          # 01-2023
        "%m/%Y",          # 01/2023
    ]
    
    for fmt in formats:
        try:
            return datetime.datetime.strptime(date_str, fmt).date()
        except ValueError:
            continue
            
    # If we couldn't parse the date with any format, just extract the year if possible
    # This handles cases like "Published in 2023" or "2023 (Conference)"
    year_match = re.search(r'20\d{2}|19\d{2}', date_str)
    if year_match:
        year = int(year_match.group(0))
        return datetime.date(year, 1, 1)  # Default to January 1st of the year
        
    # If all else fails, return None
    print(f"Could not parse date string: {date_str}")
    return None


def convert_publication_dates(apps, schema_editor):
    """
    Convert publication_date values from string to proper date objects.
    """
    TechniqueResource = apps.get_model('api', 'TechniqueResource')
    
    # Get all resources with publication dates
    resources = TechniqueResource.objects.filter(publication_date__isnull=False)
    
    for resource in resources:
        # Parse the string date into a proper date object
        if resource.publication_date:
            parsed_date = parse_date(resource.publication_date)
            resource.publication_date = parsed_date
            resource.save()


def reverse_convert_publication_dates(apps, schema_editor):
    """
    No need to reverse this operation since we're just formatting the data correctly.
    If we needed to, we could convert dates back to strings, but that would lose precision.
    """
    pass


class Migration(migrations.Migration):

    dependencies = [
        ('api', '0002_alter_techniqueresource_publication_date'),
    ]

    operations = [
        migrations.RunPython(
            convert_publication_dates,
            reverse_convert_publication_dates
        ),
    ]
