name: Backend CI

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - 'docker-compose.*.yml'
      - '.github/workflows/backend-ci.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - 'docker-compose.*.yml'
      - '.github/workflows/backend-ci.yml'

env:
  PYTHON_VERSION: "3.11"
  POETRY_VERSION: "1.8.0"
  POSTGRES_DB: tea_techniques_test
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres
  POSTGRES_HOST: localhost
  POSTGRES_PORT: 5432

jobs:
  lint-and-type-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v4
      with:
        path: backend/.venv
        key: venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('backend/poetry.lock') }}
        restore-keys: |
          venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      working-directory: backend
      run: poetry install --no-interaction --no-ansi

    - name: Run Black formatter check
      working-directory: backend
      run: poetry run black --check --diff .

    - name: Run isort import sorting check
      working-directory: backend
      run: poetry run isort --check-only --diff .

    - name: Run Pylint
      working-directory: backend
      run: poetry run pylint api/ --output-format=github

    - name: Run MyPy type checking
      working-directory: backend
      run: poetry run mypy api/

  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v4
      with:
        path: backend/.venv
        key: venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('backend/poetry.lock') }}
        restore-keys: |
          venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      working-directory: backend
      run: poetry install --no-interaction --no-ansi

    - name: Wait for PostgreSQL
      run: |
        until pg_isready -h localhost -p 5432 -U postgres; do
          echo "Waiting for PostgreSQL..."
          sleep 2
        done

    - name: Run Django migrations
      env:
        DJANGO_SETTINGS_MODULE: config.settings.test
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/tea_techniques_test
      working-directory: backend
      run: poetry run python manage.py migrate

    - name: Run tests with coverage
      env:
        DJANGO_SETTINGS_MODULE: config.settings.test
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/tea_techniques_test
        USE_POSTGRES_FOR_TESTS: "True"
      working-directory: backend
      run: |
        poetry run pytest --cov=api --cov-report=xml --cov-report=html --cov-report=term-missing --junitxml=test-results.xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage
        fail_ci_if_error: false

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: backend-test-results
        path: |
          backend/test-results.xml
          backend/htmlcov/
        retention-days: 30

    - name: Check test coverage threshold
      working-directory: backend
      run: poetry run coverage report --fail-under=80

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Install dependencies
      working-directory: backend
      run: poetry install --no-interaction --no-ansi

    - name: Run Safety check for known vulnerabilities
      working-directory: backend
      run: poetry run safety check

    - name: Run Bandit security linter
      working-directory: backend
      run: |
        poetry run bandit -r api/ -f json -o bandit-report.json || true
        poetry run bandit -r api/ -f txt

    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: backend-security-results
        path: backend/bandit-report.json
        retention-days: 30

  docker-build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build backend Docker image
      run: |
        docker build -t tea-techniques-backend:test ./backend

    - name: Test Docker image
      env:
        SECRET_KEY: test-secret-key-for-ci
        DEBUG: "False"
        ALLOWED_HOSTS: localhost
      run: |
        # Test that the Docker image runs successfully
        docker run --rm -e SECRET_KEY -e DEBUG -e ALLOWED_HOSTS tea-techniques-backend:test python manage.py check

  integration-test:
    runs-on: ubuntu-latest
    needs: [lint-and-type-check, test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Start services with Docker Compose
      run: |
        docker-compose -f docker-compose.development.yml up -d --build
        
    - name: Wait for services to be ready
      run: |
        timeout 60s bash -c 'until curl -f http://localhost:8000/api/techniques/; do sleep 2; done'

    - name: Run integration tests
      run: |
        docker-compose -f docker-compose.development.yml exec -T backend poetry run pytest api/tests/integration/ -v

    - name: Cleanup
      if: always()
      run: |
        docker-compose -f docker-compose.development.yml down -v