name: Build and Publish Docker Images

on:
  push:
    branches: [main]
    tags: ['v*']
  pull_request:
    branches: [main]
    paths:
      - 'backend/**'
      - 'frontend/**'
      - 'docker-compose*.yml'
      - '.github/workflows/docker-publish.yml'
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  BACKEND_IMAGE_NAME: ${{ github.repository }}/backend
  FRONTEND_IMAGE_NAME: ${{ github.repository }}/frontend

jobs:
  build-backend:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile.production
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-frontend:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile.production
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NEXT_PUBLIC_API_URL=http://localhost:8000

  build-compose:
    runs-on: ubuntu-latest
    needs: [build-backend, build-frontend]
    if: github.event_name != 'pull_request'
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create docker-compose.ghcr.yml
        run: |
          cat > docker-compose.ghcr.yml << 'EOF'
          version: '3.8'

          services:
            db:
              image: postgres:15
              environment:
                POSTGRES_DB: tea_techniques
                POSTGRES_USER: postgres
                POSTGRES_PASSWORD: postgres
              volumes:
                - postgres_data:/var/lib/postgresql/data
              ports:
                - "5432:5432"
              healthcheck:
                test: ["CMD-SHELL", "pg_isready -U postgres"]
                interval: 10s
                timeout: 5s
                retries: 5

            backend:
              image: ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:latest
              environment:
                DEBUG: 'False'
                SECRET_KEY: 'change-this-in-production'
                DATABASE_URL: postgresql://postgres:postgres@db:5432/tea_techniques
                ALLOWED_HOSTS: localhost,127.0.0.1
                CORS_ALLOWED_ORIGINS: http://localhost:3000,http://127.0.0.1:3000
              ports:
                - "8000:8000"
              depends_on:
                db:
                  condition: service_healthy
              healthcheck:
                test: ["CMD", "curl", "-f", "http://localhost:8000/api/techniques/"]
                interval: 30s
                timeout: 10s
                retries: 3
                start_period: 40s

            frontend:
              image: ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}:latest
              environment:
                NEXT_PUBLIC_API_URL: http://localhost:8000
              ports:
                - "3000:3000"
              depends_on:
                backend:
                  condition: service_healthy

          volumes:
            postgres_data:
          EOF

      - name: Upload docker-compose.ghcr.yml
        uses: actions/upload-artifact@v4
        with:
          name: docker-compose-ghcr
          path: docker-compose.ghcr.yml
          retention-days: 90

      - name: Test full stack deployment
        run: |
          # Use the generated docker-compose file to test the full stack
          docker-compose -f docker-compose.ghcr.yml pull
          docker-compose -f docker-compose.ghcr.yml up -d

          # Wait for services to be healthy
          echo "Waiting for services to start..."
          sleep 60

          # Test backend health
          curl -f http://localhost:8000/api/techniques/ || (echo "Backend health check failed" && exit 1)

          # Test frontend accessibility
          curl -f http://localhost:3000 || (echo "Frontend health check failed" && exit 1)

          echo "âœ… Full stack deployment test successful!"

      - name: Cleanup test deployment
        if: always()
        run: |
          docker-compose -f docker-compose.ghcr.yml down -v || true
