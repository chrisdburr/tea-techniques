[project]
name = "tea-techniques"
version = "0.1.0"
description = "A repository for a web app and dataset of techniques for assuring ML/AI systems and projects."
authors = [
    {name = "Christopher Burr", email = "chrisdburr@gmail.com"}
]
requires-python = ">=3.12"
dependencies = [
    "django>=5.1.1",
    "pandas>=2.2.3",
    "sqlalchemy>=2.0.35",
    "python-dotenv>=1.0.1",
    "markdown>=3.7",
    "beautifulsoup4>=4.12.3",
    "lxml>=5.3.0",
    "html5lib>=1.1",
    "djangorestframework>=3.15.2",
    "django-filter>=24.3",
    "django-extensions>=3.2.3",
    "django-tailwind>=3.8.0",
    "django-browser-reload>=1.15.0",
    "psycopg>=3.2.5",
    "django-cors-headers>=4.7.0",
    "drf-yasg>=1.21.9",
    "whitenoise>=6.6.0",
    "bs4>=0.0.2",
    "requests>=2.32.3",
    "jsonschema>=4.23.0",
    "django-debug-toolbar>=5.1.0",
]


[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
strict_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true

[[tool.mypy.overrides]]
module = "*.migrations.*"
ignore_errors = true

[[tool.mypy.overrides]]
module = "*.tests.*"
ignore_errors = true

[tool.pytest.ini_options]
DJANGO_SETTINGS_MODULE = "config.settings.test"
python_files = ["test_*.py", "*_test.py"]
testpaths = ["api/tests"]
filterwarnings = ["ignore::DeprecationWarning"]
addopts = [
    "--cov=api",
    "--cov-report=term-missing",
    "--cov-report=html:coverage_html",
    "--cov-report=xml:coverage.xml",
    "--cov-fail-under=90",
    "--strict-markers",
    "--strict-config",
    "-v",
]
markers = [
    "unit: Unit tests that don't require database",
    "integration: Integration tests that use database",
    "api: API endpoint tests",
    "slow: Tests that take longer than 1 second",
    "performance: Performance benchmarking tests",
]

[tool.coverage.run]
source = ["api"]
omit = [
    "*/migrations/*",
    "*/tests/*",
    "*/venv/*",
    "manage.py",
    "config/settings/*",
    "*/conftest.py",
    "*/factories.py",
]
branch = true

[tool.coverage.report]
# Fail if total coverage is below 90%
fail_under = 90
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "def __str__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

[tool.coverage.html]
directory = "coverage_html"

[tool.coverage.xml]
output = "coverage.xml"

[tool.ruff]
target-version = "py312"
line-length = 120
indent-width = 4

exclude = [
    ".git",
    ".venv",
    "build",
    "dist",
    "migrations",
    "__pycache__",
    "staticfiles",
]

[tool.ruff.lint]
select = [
    "E4", "E7", "E9",  # pycodestyle errors
    "F",              # pyflakes
    "B",              # flake8-bugbear
    "I",              # isort
    "C4",             # flake8-comprehensions
    "UP",             # pyupgrade
    "DJ",             # flake8-django
    "S",              # flake8-bandit (security)
    "ARG",            # flake8-unused-arguments
    "SIM",            # flake8-simplify
    "PTH",            # flake8-use-pathlib
    "RUF",            # Ruff-specific rules
]

ignore = [
    "E501",   # line too long (handled by formatter)
    "S101",   # use of assert (common in Django/tests)
    "S105",   # hardcoded password (often false positives)
    "S106",   # hardcoded password (often false positives)
    "B008",   # do not perform function calls in argument defaults
    "ARG001", # unused function argument (common in Django views)
    "ARG002", # unused method argument (common in Django methods)
    "RUF012", # mutable class attributes (common in Django admin)
]

fixable = ["ALL"]
unfixable = []

[tool.ruff.lint.per-file-ignores]
"*/migrations/*" = ["ALL"]
"*/tests/*" = ["S101", "ARG001", "ARG002", "PLR2004"]
"manage.py" = ["ARG001"]
"*/settings/*" = ["F401", "F403", "F405"]
"conftest.py" = ["ARG001"]

[tool.ruff.lint.isort]
known-first-party = ["api", "config"]
known-third-party = ["django", "rest_framework"]
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[build-system]
requires = ["setuptools>=45", "wheel"]
build-backend = "setuptools.build_meta"

[dependency-groups]
dev = [
    "pytest>=8.4.1",
    "pytest-django>=4.8.0",
    "pytest-cov>=4.1.0",
    "factory-boy>=3.3.0",
    "faker>=23.1.0",
    "mypy>=1.16.1",
    "django-stubs>=4.2.7",
    "djangorestframework-stubs>=3.14.5",
    "types-requests>=2.32.0.20240420",
    "types-markdown>=3.5.0.20240412",
    "safety>=3.6.0",
    "ruff>=0.12.3",
    "bandit>=1.8.0",
]

[tool.setuptools]
packages = []
