name: Backend CI

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - 'docker-compose.*.yml'
      - '.github/workflows/backend-ci.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - 'docker-compose.*.yml'
      - '.github/workflows/backend-ci.yml'

env:
  PYTHON_VERSION: "3.11"
  POSTGRES_DB: tea_techniques_test
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres
  POSTGRES_HOST: localhost
  POSTGRES_PORT: 5432

jobs:
  lint-and-type-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements/development.txt

    - name: Run Black formatter check
      run: |
        cd backend
        black --check --diff .

    - name: Run isort import sorting check
      run: |
        cd backend
        isort --check-only --diff .

    - name: Run Pylint
      run: |
        cd backend
        pylint api/ --output-format=github

    - name: Run MyPy type checking
      run: |
        cd backend
        mypy api/

  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements/development.txt

    - name: Wait for PostgreSQL
      run: |
        until pg_isready -h localhost -p 5432 -U postgres; do
          echo "Waiting for PostgreSQL..."
          sleep 2
        done

    - name: Run Django migrations
      env:
        DJANGO_SETTINGS_MODULE: config.settings.test
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/tea_techniques_test
      run: |
        cd backend
        python manage.py migrate

    - name: Run tests with coverage
      env:
        DJANGO_SETTINGS_MODULE: config.settings.test
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/tea_techniques_test
        USE_POSTGRES_FOR_TESTS: "True"
      run: |
        cd backend
        pytest --cov=api --cov-report=xml --cov-report=html --cov-report=term-missing --junitxml=test-results.xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage
        fail_ci_if_error: false

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: backend-test-results
        path: |
          backend/test-results.xml
          backend/htmlcov/
        retention-days: 30

    - name: Check test coverage threshold
      run: |
        cd backend
        coverage report --fail-under=80

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install safety bandit

    - name: Run Safety check for known vulnerabilities
      run: |
        cd backend
        safety check -r requirements/production.txt

    - name: Run Bandit security linter
      run: |
        cd backend
        bandit -r api/ -f json -o bandit-report.json || true
        bandit -r api/ -f txt

    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: backend-security-results
        path: backend/bandit-report.json
        retention-days: 30

  docker-build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build backend Docker image
      run: |
        docker build -t tea-techniques-backend:test ./backend

    - name: Test Docker image
      run: |
        # Test that the Docker image runs successfully
        docker run --rm tea-techniques-backend:test python manage.py check --deploy

  integration-test:
    runs-on: ubuntu-latest
    needs: [lint-and-type-check, test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Start services with Docker Compose
      run: |
        docker-compose -f docker-compose.test.yml up -d --build
        
    - name: Wait for services to be ready
      run: |
        timeout 60s bash -c 'until curl -f http://localhost:8000/api/; do sleep 2; done'

    - name: Run integration tests
      run: |
        docker-compose -f docker-compose.test.yml exec -T backend pytest api/tests/test_api.py -v

    - name: Cleanup
      if: always()
      run: |
        docker-compose -f docker-compose.test.yml down -v