name: Branch Protection

on:
  push:
    branches: [ main ]
  schedule:
    # Run daily at 2 AM UTC to check for dependency updates
    - cron: '0 2 * * *'

env:
  PYTHON_VERSION: '3.12'
  NODE_VERSION: '18'
  PNPM_VERSION: '10.6.5'

jobs:
  # Daily dependency security check
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install dependencies
        run: |
          cd backend && poetry install --with dev
          cd frontend && pnpm install --frozen-lockfile

      - name: Backend security audit
        working-directory: backend
        run: |
          poetry run pip-audit
          poetry run bandit -r api/ -f json -o security-report.json
        continue-on-error: true

      - name: Frontend security audit
        working-directory: frontend
        run: pnpm audit --audit-level moderate
        continue-on-error: true

      - name: Create security issue if vulnerabilities found
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const title = `ðŸš¨ Security vulnerabilities detected - ${new Date().toISOString().split('T')[0]}`;
            const body = `
            ## Security Audit Report
            
            Daily security scan has detected vulnerabilities that require attention.
            
            **Action Required:**
            - Review the failing checks in the [workflow run](${context.payload.repository.html_url}/actions/runs/${context.runId})
            - Update vulnerable dependencies
            - Apply security patches where available
            
            **Next Steps:**
            1. Run \`make security-check\` locally to reproduce issues
            2. Update dependencies using \`poetry update\` (backend) or \`pnpm update\` (frontend)
            3. Test that updates don't break functionality
            4. Create a PR with the security fixes
            
            This issue was automatically created by the branch protection workflow.
            `;
            
            // Check if a similar issue already exists
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['security'],
              state: 'open'
            });
            
            const existingIssue = issues.data.find(issue => 
              issue.title.includes('Security vulnerabilities detected')
            );
            
            if (!existingIssue) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                labels: ['security', 'priority-high', 'automated']
              });
            }

  # Validate main branch protection
  validate-protection:
    name: Validate Branch Protection
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Check branch protection status
        uses: actions/github-script@v7
        with:
          script: |
            try {
              const protection = await github.rest.repos.getBranchProtection({
                owner: context.repo.owner,
                repo: context.repo.repo,
                branch: 'main'
              });
              
              console.log('Branch protection is enabled');
              console.log('Required status checks:', protection.data.required_status_checks);
              console.log('Required reviews:', protection.data.required_pull_request_reviews);
              
              // Validate required settings
              const checks = protection.data.required_status_checks;
              const reviews = protection.data.required_pull_request_reviews;
              
              if (!checks || !checks.strict) {
                core.setFailed('Branch protection must require up-to-date branches');
              }
              
              if (!reviews || reviews.required_approving_review_count < 1) {
                core.setFailed('Branch protection must require at least 1 review');
              }
              
              const expectedChecks = [
                'Static Analysis',
                'Unit Tests (backend)',
                'Unit Tests (frontend)',
                'Integration Tests',
                'Build Verification'
              ];
              
              const missingChecks = expectedChecks.filter(check => 
                !checks.contexts.includes(check)
              );
              
              if (missingChecks.length > 0) {
                console.warn('Missing required status checks:', missingChecks);
              }
              
            } catch (error) {
              if (error.status === 404) {
                core.setFailed('Branch protection is not enabled for main branch');
              } else {
                throw error;
              }
            }

  # Quality metrics reporting
  quality-metrics:
    name: Quality Metrics
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Need full history for metrics

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install dependencies
        run: |
          cd backend && poetry install --with dev
          cd frontend && pnpm install --frozen-lockfile

      - name: Generate backend metrics
        working-directory: backend
        run: |
          # Test coverage
          poetry run pytest --cov=api --cov-report=json --quiet
          
          # Code quality metrics
          poetry run pylint api/ --output-format=json > pylint-report.json || true
          
          # Security metrics
          poetry run bandit -r api/ -f json -o bandit-report.json || true
          
          # Type coverage
          poetry run mypy api/ --json-report mypy-report || true

      - name: Generate frontend metrics
        working-directory: frontend
        run: |
          # Test coverage
          pnpm test:coverage --reporter=json --outputFile=coverage-summary.json
          
          # Build size analysis
          pnpm build
          du -sh .next/static/chunks/ > build-size.txt

      - name: Calculate quality score
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            // Backend metrics
            let backendScore = 0;
            try {
              const coverage = JSON.parse(fs.readFileSync('backend/coverage.json'));
              backendScore += Math.min(coverage.totals.percent_covered, 100) * 0.4;
            } catch (e) {
              console.log('No backend coverage data');
            }
            
            // Frontend metrics  
            let frontendScore = 0;
            try {
              const coverage = JSON.parse(fs.readFileSync('frontend/coverage-summary.json'));
              frontendScore += Math.min(coverage.total.lines.pct, 100) * 0.4;
            } catch (e) {
              console.log('No frontend coverage data');
            }
            
            const totalScore = Math.round((backendScore + frontendScore) / 2);
            
            console.log(`Quality Score: ${totalScore}/100`);
            
            // Create or update quality badge
            const badge = {
              schemaVersion: 1,
              label: 'quality',
              message: `${totalScore}%`,
              color: totalScore >= 90 ? 'brightgreen' : totalScore >= 80 ? 'yellow' : 'red'
            };
            
            fs.writeFileSync('quality-badge.json', JSON.stringify(badge));

      - name: Upload quality metrics
        uses: actions/upload-artifact@v4
        with:
          name: quality-metrics
          path: |
            backend/coverage.json
            backend/pylint-report.json
            backend/bandit-report.json
            frontend/coverage-summary.json
            frontend/build-size.txt
            quality-badge.json

  # Dependency update check
  dependency-updates:
    name: Check for Updates
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1

      - name: Check for backend updates
        working-directory: backend
        run: |
          poetry show --outdated > outdated-packages.txt || echo "No outdated packages"

      - name: Check for frontend updates
        working-directory: frontend
        run: |
          pnpm outdated > ../outdated-frontend.txt || echo "No outdated packages"

      - name: Create update PR if needed
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            let updateNeeded = false;
            let updateSummary = '';
            
            // Check backend updates
            try {
              const backendUpdates = fs.readFileSync('backend/outdated-packages.txt', 'utf8');
              if (backendUpdates.length > 0 && !backendUpdates.includes('No outdated packages')) {
                updateNeeded = true;
                updateSummary += '## Backend Dependencies\n\n```\n' + backendUpdates + '\n```\n\n';
              }
            } catch (e) {
              console.log('No backend update info');
            }
            
            // Check frontend updates
            try {
              const frontendUpdates = fs.readFileSync('outdated-frontend.txt', 'utf8');
              if (frontendUpdates.length > 0 && !frontendUpdates.includes('No outdated packages')) {
                updateNeeded = true;
                updateSummary += '## Frontend Dependencies\n\n```\n' + frontendUpdates + '\n```\n\n';
              }
            } catch (e) {
              console.log('No frontend update info');
            }
            
            if (updateNeeded) {
              const title = `ðŸ“¦ Dependency updates available - ${new Date().toISOString().split('T')[0]}`;
              const body = `
              ## Dependency Updates Available
              
              The following dependencies have updates available:
              
              ${updateSummary}
              
              **Recommended Actions:**
              1. Review the updates for breaking changes
              2. Update non-breaking dependencies first
              3. Test thoroughly before merging
              4. Consider security implications of delayed updates
              
              **Commands to update:**
              - Backend: \`cd backend && poetry update\`
              - Frontend: \`cd frontend && pnpm update\`
              
              This issue was automatically created by the dependency monitoring workflow.
              `;
              
              // Check if similar issue exists
              const issues = await github.rest.issues.listForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
                labels: ['dependencies'],
                state: 'open'
              });
              
              const existingIssue = issues.data.find(issue => 
                issue.title.includes('Dependency updates available')
              );
              
              if (!existingIssue) {
                await github.rest.issues.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title: title,
                  body: body,
                  labels: ['dependencies', 'maintenance', 'automated']
                });
              }
            }