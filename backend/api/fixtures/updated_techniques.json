[
    {
        "model": "api.technique",
        "pk": 1,
        "fields": {
            "name": "SHAP (SHapley Additive exPlanations)",
            "description": "Assigns importance values to each feature by computing their contribution to individual predictions, based on Shapley values from cooperative game theory.",
            "model_dependency": "Model-Agnostic"
        }
    },
    {
        "model": "api.technique",
        "pk": 2,
        "fields": {
            "name": "Permutation Importance",
            "description": "Evaluates feature importance by measuring the decrease in model accuracy when a feature's values are randomly shuffled.",
            "model_dependency": "Model-Agnostic"
        }
    },
    {
        "model": "api.technique",
        "pk": 3,
        "fields": {
            "name": "Mean Decrease Impurity (MDI)",
            "description": "Calculates feature importance in tree-based models by measuring how much each feature decreases impurity across all trees.",
            "model_dependency": "Model-Specific"
        }
    },
    {
        "model": "api.technique",
        "pk": 4,
        "fields": {
            "name": "Gini Importance",
            "description": "Measures the total reduction of Gini impurity brought by a feature across all nodes and trees in decision trees and Random Forests.",
            "model_dependency": "Model-Specific"
        }
    },
    {
        "model": "api.technique",
        "pk": 5,
        "fields": {
            "name": "Coefficient Magnitudes (in Linear Models)",
            "description": "Uses the absolute values of coefficients in linear models to represent feature importance, indicating the strength and direction of relationships.",
            "model_dependency": "Model-Specific"
        }
    },
    {
        "model": "api.technique",
        "pk": 6,
        "fields": {
            "name": "Integrated Gradients",
            "description": "Attributes feature importance by integrating gradients of the model's output with respect to inputs along a path from a baseline to the actual input.",
            "model_dependency": "Model-Specific"
        }
    },
    {
        "model": "api.technique",
        "pk": 7,
        "fields": {
            "name": "DeepLIFT",
            "description": "Tracks changes in the output relative to a reference input, decomposing contributions from individual neurons to the final prediction in deep learning models.",
            "model_dependency": "Model-Specific"
        }
    },
    {
        "model": "api.technique",
        "pk": 8,
        "fields": {
            "name": "Layer-wise Relevance Propagation (LRP)",
            "description": "Explains predictions by backpropagating relevance scores from the output layer to input features, distributing the prediction score layer by layer.",
            "model_dependency": "Model-Specific"
        }
    },
    {
        "model": "api.technique",
        "pk": 9,
        "fields": {
            "name": "Variable Importance in Random Forests (MDA, MDG)",
            "description": "Calculates feature importance by measuring the Mean Decrease Accuracy or Mean Decrease Gini when a feature is excluded from Random Forest models.",
            "model_dependency": "Model-Specific"
        }
    },
    {
        "model": "api.technique",
        "pk": 10,
        "fields": {
            "name": "Contextual Decomposition",
            "description": "Interprets neural networks by decomposing activations to explain predictions based on contributions of individual features or groups.",
            "model_dependency": "Model-Specific"
        }
    },
    {
        "model": "api.technique",
        "pk": 11,
        "fields": {
            "name": "Taylor Decomposition",
            "description": "Decomposes predictions into contributions from individual features using a Taylor series expansion of the model's prediction function.",
            "model_dependency": "Model-Specific"
        }
    },
    {
        "model": "api.technique",
        "pk": 12,
        "fields": {
            "name": "Sobol Indices",
            "description": "Quantifies the contribution of individual variables and their interactions to the output variance in sensitivity analysis.",
            "model_dependency": "Model-Agnostic"
        }
    },
    {
        "model": "api.technique",
        "pk": 13,
        "fields": {
            "name": "Feature Interaction Detection (H-statistic)",
            "description": "Measures feature interaction by comparing joint contributions to the model with the sum of individual contributions.",
            "model_dependency": "Model-Agnostic"
        }
    },
    {
        "model": "api.technique",
        "pk": 14,
        "fields": {
            "name": "LIME (Local Interpretable Model-Agnostic Explanations)",
            "description": "Generates local surrogate models that approximate complex model behaviour around a specific instance using interpretable models like linear models.",
            "model_dependency": "Model-Agnostic"
        }
    },
    {
        "model": "api.technique",
        "pk": 15,
        "fields": {
            "name": "Ridge Regression Surrogates",
            "description": "Uses Ridge Regression as a surrogate to approximate global behaviour of complex models, balancing simplicity and interpretability with regularisation.",
            "model_dependency": "Model-Agnostic"
        }
    },
    {
        "model": "api.technique",
        "pk": 16,
        "fields": {
            "name": "Partial Dependence Plots (PDP)",
            "description": "Visualises the relationship between one or two features and the predicted outcome, averaging out effects of other features.",
            "model_dependency": "Model-Agnostic"
        }
    },
    {
        "model": "api.technique",
        "pk": 17,
        "fields": {
            "name": "Accumulated Local Effects (ALE) Plots",
            "description": "Similar to PDPs but account for feature interactions, providing accurate insights when features are correlated.",
            "model_dependency": "Model-Agnostic"
        }
    },
    {
        "model": "api.technique",
        "pk": 18,
        "fields": {
            "name": "Individual Conditional Expectation (ICE) Plots",
            "description": "Shows how a feature affects predictions for individual instances, highlighting heterogeneous effects across data points.",
            "model_dependency": "Model-Agnostic"
        }
    },
    {
        "model": "api.technique",
        "pk": 19,
        "fields": {
            "name": "Saliency Maps",
            "description": "Highlights important pixels in input images that most influence the output prediction in computer vision models.",
            "model_dependency": "Model-Specific"
        }
    },
    {
        "model": "api.technique",
        "pk": 20,
        "fields": {
            "name": "Grad-CAM (Gradient-weighted Class Activation Mapping)",
            "description": "Uses gradients to produce heatmaps highlighting image regions that contribute most to the model's output.",
            "model_dependency": "Model-Specific"
        }
    },
    {
        "model": "api.technique",
        "pk": 21,
        "fields": {
            "name": "Occlusion Sensitivity",
            "description": "Measures prediction changes by systematically occluding parts of the input to identify important regions or features.",
            "model_dependency": "Model-Specific"
        }
    },
    {
        "model": "api.technique",
        "pk": 22,
        "fields": {
            "name": "Attention Mechanisms in Neural Networks",
            "description": "Visualises attention weights in models like transformers, highlighting important input parts for predictions.",
            "model_dependency": "Model-Specific"
        }
    },
    {
        "model": "api.technique",
        "pk": 23,
        "fields": {
            "name": "Factor Analysis",
            "description": "Reduces dimensionality by identifying latent factors explaining observed variability, aiding in data interpretation.",
            "model_dependency": "Model-Agnostic"
        }
    },
    {
        "model": "api.technique",
        "pk": 24,
        "fields": {
            "name": "Principal Component Analysis (PCA)",
            "description": "Reduces dimensionality by projecting data onto directions of maximum variance, simplifying data while retaining important information.",
            "model_dependency": "Model-Agnostic"
        }
    },
    {
        "model": "api.technique",
        "pk": 25,
        "fields": {
            "name": "t-SNE",
            "description": "A non-linear technique that visualises high-dimensional data in 2D or 3D, preserving local relationships between points.",
            "model_dependency": "Model-Agnostic"
        }
    },
    {
        "model": "api.technique",
        "pk": 26,
        "fields": {
            "name": "UMAP",
            "description": "A non-linear technique similar to t-SNE but better at preserving global data structure.",
            "model_dependency": "Model-Agnostic"
        }
    },
    {
        "model": "api.technique",
        "pk": 27,
        "fields": {
            "name": "Prototype and Criticism Models",
            "description": "Identifies representative (prototypes) and non-representative (criticisms) examples to summarise and highlight model behaviour.",
            "model_dependency": "Model-Agnostic"
        }
    },
    {
        "model": "api.technique",
        "pk": 28,
        "fields": {
            "name": "Influence Functions",
            "description": "Measures the impact of training examples on model predictions to identify influential data points.",
            "model_dependency": "Model-Agnostic"
        }
    },
    {
        "model": "api.technique",
        "pk": 29,
        "fields": {
            "name": "Contrastive Explanation Method (CEM)",
            "description": "Generates explanations by identifying minimal input changes that result in different outcomes, offering counterfactual reasoning.",
            "model_dependency": "Model-Agnostic"
        }
    },
    {
        "model": "api.technique",
        "pk": 30,
        "fields": {
            "name": "Bayesian Networks (e.g., bnlearn)",
            "description": "Probabilistic graphical models representing variables and their conditional dependencies for causal reasoning.",
            "model_dependency": "Model-Specific"
        }
    },
    {
        "model": "api.technique",
        "pk": 31,
        "fields": {
            "name": "ANCHOR",
            "description": "Provides high-precision if-then rules for specific predictions, explaining which features are responsible for the decision.",
            "model_dependency": "Model-Agnostic"
        }
    },
    {
        "model": "api.technique",
        "pk": 32,
        "fields": {
            "name": "RuleFit",
            "description": "Combines decision rules with linear models to provide interpretable models capturing non-linear patterns.",
            "model_dependency": "Model-Agnostic"
        }
    },
    {
        "model": "api.technique",
        "pk": 33,
        "fields": {
            "name": "Monte Carlo Dropout",
            "description": "Uses dropout at inference time in deep learning models to estimate uncertainty by approximating Bayesian inference.",
            "model_dependency": "Model-Specific"
        }
    },
    {
        "model": "api.technique",
        "pk": 34,
        "fields": {
            "name": "ODIN (Out-of-DIstribution detector for Neural networks)",
            "description": "Detects out-of-distribution samples in neural networks by applying temperature scaling and input perturbations.",
            "model_dependency": "Model-Specific"
        }
    },
    {
        "model": "api.technique",
        "pk": 35,
        "fields": {
            "name": "Permutation Tests",
            "description": "Estimates uncertainty by permuting data labels and calculating test statistics to create a null distribution in non-parametric methods.",
            "model_dependency": "Model-Agnostic"
        }
    },
    {
        "model": "api.technique",
        "pk": 36,
        "fields": {
            "name": "Fairness Metrics (e.g., Equalized Odds, Demographic Parity)",
            "description": "Evaluates models for fairness by measuring disparities in predictions across different demographic groups.",
            "model_dependency": "Model-Agnostic"
        }
    },
    {
        "model": "api.technique",
        "pk": 37,
        "fields": {
            "name": "Model Pruning",
            "description": "Simplifies neural networks by removing less important weights or neurons, reducing complexity while retaining performance.",
            "model_dependency": "Model-Specific"
        }
    },
    {
        "model": "api.technique",
        "pk": 38,
        "fields": {
            "name": "Knowledge Distillation",
            "description": "Trains a simpler 'student' model to replicate the behaviour of a complex 'teacher' model, resulting in a more interpretable model.",
            "model_dependency": "Model-Agnostic"
        }
    },
    {
        "model": "api.technique",
        "pk": 39,
        "fields": {
            "name": "Attention Visualisation in Transformers",
            "description": "Visualises attention weights in transformer-based models to show how the model focuses on different input parts during prediction.",
            "model_dependency": "Model-Specific"
        }
    },
    {
        "model": "api.technique",
        "pk": 40,
        "fields": {
            "name": "Neuron Activation Analysis",
            "description": "Analyses activation patterns of neurons in large language models (LLMs) to interpret their roles and the concepts they represent.",
            "model_dependency": "Model-Specific"
        }
    },
    {
        "model": "api.technique",
        "pk": 41,
        "fields": {
            "name": "Prompt Sensitivity Analysis",
            "description": "Studies how variations in input prompts affect LLM outputs to understand model behaviour and sensitivity.",
            "model_dependency": "Model-Specific"
        }
    },
    {
        "model": "api.technique",
        "pk": 42,
        "fields": {
            "name": "Causal Mediation Analysis in Language Models",
            "description": "Investigates causal relationships within LLMs by assessing how interventions on specific components affect outputs.",
            "model_dependency": "Model-Specific"
        }
    },
    {
        "model": "api.technique",
        "pk": 43,
        "fields": {
            "name": "Feature Attribution with Integrated Gradients in NLP",
            "description": "Applies Integrated Gradients to attribute importance of input tokens in LLMs for specific predictions, often producing visualisations.",
            "model_dependency": "Model-Specific"
        }
    },
    {
        "model": "api.technique",
        "pk": 44,
        "fields": {
            "name": "Concept Activation Vectors (CAVs)",
            "description": "Represents human-understandable concepts as vectors in the model's latent space to analyse their influence on predictions.",
            "model_dependency": "Model-Specific"
        }
    },
    {
        "model": "api.technique",
        "pk": 45,
        "fields": {
            "name": "In-Context Learning Analysis",
            "description": "Examines how LLMs learn from examples provided in the input prompt, revealing capacity for few-shot learning.",
            "model_dependency": "Model-Specific"
        }
    },
    {
        "model": "api.technique",
        "pk": 46,
        "fields": {
            "name": "Reweighing",
            "description": "Assigns weights to instances in the training data to ensure different groups are equally represented in all labels.",
            "model_dependency": "Model-Agnostic"
        }
    },
    {
        "model": "api.technique",
        "pk": 47,
        "fields": {
            "name": "Disparate Impact Remover",
            "description": "Edits feature values to reduce dependence between features and protected attributes, aiming to mitigate disparate impact.",
            "model_dependency": "Model-Agnostic"
        }
    },
    {
        "model": "api.technique",
        "pk": 48,
        "fields": {
            "name": "Learning Fair Representations",
            "description": "Learns latent representations that encode data well but obfuscate information about protected attributes.",
            "model_dependency": "Model-Agnostic"
        }
    },
    {
        "model": "api.technique",
        "pk": 49,
        "fields": {
            "name": "Fairness GAN",
            "description": "Employs Generative Adversarial Networks to generate fair representations of data that obfuscate protected attributes.",
            "model_dependency": "Model-Specific"
        }
    },
    {
        "model": "api.technique",
        "pk": 50,
        "fields": {
            "name": "Optimised Pre-Processing",
            "description": "Modifies training data features and labels to induce fairness while preserving data utility.",
            "model_dependency": "Model-Agnostic"
        }
    },
    {
        "model": "api.technique",
        "pk": 51,
        "fields": {
            "name": "Relabelling",
            "description": "Changes labels of certain instances in training data to reduce bias, often based on fairness constraints.",
            "model_dependency": "Model-Agnostic"
        }
    },
    {
        "model": "api.technique",
        "pk": 52,
        "fields": {
            "name": "Preferential Sampling",
            "description": "Re-samples data with preference for certain groups to achieve fair representation in training datasets.",
            "model_dependency": "Model-Agnostic"
        }
    },
    {
        "model": "api.technique",
        "pk": 53,
        "fields": {
            "name": "Fairness Through Unawareness",
            "description": "Ensures the model does not use protected attributes in decisions; however, indirect bias may persist.",
            "model_dependency": "Model-Agnostic"
        }
    },
    {
        "model": "api.technique",
        "pk": 54,
        "fields": {
            "name": "Adversarial Debiasing",
            "description": "Trains a model to make accurate predictions while reducing the ability of an adversary to predict protected attributes from outputs.",
            "model_dependency": "Model-Specific"
        }
    },
    {
        "model": "api.technique",
        "pk": 55,
        "fields": {
            "name": "Adversarial Debiasing for Text",
            "description": "Applies adversarial debiasing techniques specifically to textual data to mitigate biases in language models.",
            "model_dependency": "Model-Specific"
        }
    },
    {
        "model": "api.technique",
        "pk": 56,
        "fields": {
            "name": "Fair Adversarial Networks",
            "description": "Extends adversarial debiasing by incorporating fairness into deep learning via adversarial training.",
            "model_dependency": "Model-Specific"
        }
    },
    {
        "model": "api.technique",
        "pk": 57,
        "fields": {
            "name": "Prejudice Remover Regulariser",
            "description": "Incorporates a fairness penalty into the learning objective to penalise models that encode biases with respect to protected attributes.",
            "model_dependency": "Model-Specific"
        }
    },
    {
        "model": "api.technique",
        "pk": 58,
        "fields": {
            "name": "Meta Fair Classifier",
            "description": "Modifies any classifier to optimise for fairness metrics using a meta-learning algorithm.",
            "model_dependency": "Model-Agnostic"
        }
    },
    {
        "model": "api.technique",
        "pk": 59,
        "fields": {
            "name": "Exponentiated Gradient Reduction",
            "description": "Formulates fairness as a constrained optimisation problem, using exponentiated gradient methods to find optimal classifiers.",
            "model_dependency": "Model-Agnostic"
        }
    },
    {
        "model": "api.technique",
        "pk": 60,
        "fields": {
            "name": "Fair Transfer Learning",
            "description": "Adapts models trained on one domain to another while preserving fairness constraints across domains.",
            "model_dependency": "Model-Specific"
        }
    },
    {
        "model": "api.technique",
        "pk": 61,
        "fields": {
            "name": "Adaptive Sensitive Reweighting",
            "description": "Dynamically adjusts weights during training based on model performance across different groups.",
            "model_dependency": "Model-Agnostic"
        }
    },
    {
        "model": "api.technique",
        "pk": 62,
        "fields": {
            "name": "Multi-Accuracy Boosting",
            "description": "Improves accuracy uniformly across groups by correcting errors where the model performs poorly for certain groups.",
            "model_dependency": "Model-Agnostic"
        }
    },
    {
        "model": "api.technique",
        "pk": 63,
        "fields": {
            "name": "Equalised Odds Post-Processing",
            "description": "Adjusts output probabilities to equalise true positive and false positive rates across groups.",
            "model_dependency": "Model-Agnostic"
        }
    },
    {
        "model": "api.technique",
        "pk": 64,
        "fields": {
            "name": "Threshold Optimiser",
            "description": "Adjusts decision thresholds for different groups to satisfy fairness constraints post-training.",
            "model_dependency": "Model-Agnostic"
        }
    },
    {
        "model": "api.technique",
        "pk": 65,
        "fields": {
            "name": "Reject Option Classification",
            "description": "Changes decisions where the model is least certain, favouring the disadvantaged group within this uncertain region.",
            "model_dependency": "Model-Agnostic"
        }
    },
    {
        "model": "api.technique",
        "pk": 66,
        "fields": {
            "name": "Calibration with Equality of Opportunity",
            "description": "Adjusts probabilities to achieve equal true positive rates across groups while maintaining calibration within each group.",
            "model_dependency": "Model-Agnostic"
        }
    },
    {
        "model": "api.technique",
        "pk": 67,
        "fields": {
            "name": "Statistical Parity Difference",
            "description": "Measures the difference in positive outcome rates between protected and unprotected groups.",
            "model_dependency": "Model-Agnostic"
        }
    },
    {
        "model": "api.technique",
        "pk": 68,
        "fields": {
            "name": "Disparate Impact",
            "description": "Assesses whether decisions disproportionately affect members of a protected group, typically requiring a ratio between rates.",
            "model_dependency": "Model-Agnostic"
        }
    },
    {
        "model": "api.technique",
        "pk": 69,
        "fields": {
            "name": "Demographic Parity",
            "description": "Evaluates if the outcome is independent of the protected attributes, aiming for equal outcome rates across groups.",
            "model_dependency": "Model-Agnostic"
        }
    },
    {
        "model": "api.technique",
        "pk": 70,
        "fields": {
            "name": "Equal Opportunity Difference",
            "description": "Computes the difference in true positive rates between groups, assessing fairness in terms of equal opportunity.",
            "model_dependency": "Model-Agnostic"
        }
    },
    {
        "model": "api.technique",
        "pk": 71,
        "fields": {
            "name": "Average Odds Difference",
            "description": "Calculates the average difference in false positive and true positive rates between groups.",
            "model_dependency": "Model-Agnostic"
        }
    },
    {
        "model": "api.technique",
        "pk": 72,
        "fields": {
            "name": "Individual Fairness Metric (Consistency)",
            "description": "Evaluates whether similar individuals receive similar predictions, assessing fairness at an individual level.",
            "model_dependency": "Model-Agnostic"
        }
    },
    {
        "model": "api.technique",
        "pk": 73,
        "fields": {
            "name": "Algorithmic Fairness using K-NN",
            "description": "Uses K-nearest neighbours to assess individual fairness by comparing predictions among similar instances.",
            "model_dependency": "Model-Agnostic"
        }
    },
    {
        "model": "api.technique",
        "pk": 74,
        "fields": {
            "name": "Counterfactual Fairness (Causal Modelling)",
            "description": "Ensures predictions remain the same in a counterfactual world where protected attributes are altered.",
            "model_dependency": "Model-Specific"
        }
    },
    {
        "model": "api.technique",
        "pk": 75,
        "fields": {
            "name": "Path-Specific Counterfactual Fairness",
            "description": "Considers specific causal pathways, allowing fairness interventions on certain paths.",
            "model_dependency": "Model-Specific"
        }
    },
    {
        "model": "api.technique",
        "pk": 76,
        "fields": {
            "name": "Causal Fairness Assessment with Do-Calculus",
            "description": "Utilises causal inference techniques to assess and mitigate bias by computing interventional distributions.",
            "model_dependency": "Model-Specific"
        }
    },
    {
        "model": "api.technique",
        "pk": 77,
        "fields": {
            "name": "Diversity Constraints in Recommendations",
            "description": "Incorporates diversity and fairness constraints in recommendation systems for varied and fair content exposure.",
            "model_dependency": "Model-Specific"
        }
    },
    {
        "model": "api.technique",
        "pk": 78,
        "fields": {
            "name": "Bayesian Fairness Regularisation",
            "description": "Applies Bayesian methods to include fairness as a prior, allowing probabilistic interpretation of fairness constraints.",
            "model_dependency": "Model-Specific"
        }
    },
    {
        "model": "api.technique",
        "pk": 79,
        "fields": {
            "name": "SHAP Values for Fairness",
            "description": "Uses SHAP (SHapley Additive exPlanations) to attribute model predictions to input features, helping to identify bias contributions.",
            "model_dependency": "Model-Agnostic"
        }
    },
    {
        "model": "api.techniqueassurancegoal",
        "pk": 1,
        "fields": {
            "technique": 1,
            "assurance_goal": 1
        }
    },
    {
        "model": "api.techniqueassurancegoal",
        "pk": 2,
        "fields": {
            "technique": 2,
            "assurance_goal": 1
        }
    },
    {
        "model": "api.techniqueassurancegoal",
        "pk": 3,
        "fields": {
            "technique": 3,
            "assurance_goal": 1
        }
    },
    {
        "model": "api.techniqueassurancegoal",
        "pk": 4,
        "fields": {
            "technique": 4,
            "assurance_goal": 1
        }
    },
    {
        "model": "api.techniqueassurancegoal",
        "pk": 5,
        "fields": {
            "technique": 5,
            "assurance_goal": 1
        }
    },
    {
        "model": "api.techniqueassurancegoal",
        "pk": 6,
        "fields": {
            "technique": 6,
            "assurance_goal": 1
        }
    },
    {
        "model": "api.techniqueassurancegoal",
        "pk": 7,
        "fields": {
            "technique": 7,
            "assurance_goal": 1
        }
    },
    {
        "model": "api.techniqueassurancegoal",
        "pk": 8,
        "fields": {
            "technique": 8,
            "assurance_goal": 1
        }
    },
    {
        "model": "api.techniqueassurancegoal",
        "pk": 9,
        "fields": {
            "technique": 9,
            "assurance_goal": 1
        }
    },
    {
        "model": "api.techniqueassurancegoal",
        "pk": 10,
        "fields": {
            "technique": 10,
            "assurance_goal": 1
        }
    },
    {
        "model": "api.techniqueassurancegoal",
        "pk": 11,
        "fields": {
            "technique": 11,
            "assurance_goal": 1
        }
    },
    {
        "model": "api.techniqueassurancegoal",
        "pk": 12,
        "fields": {
            "technique": 12,
            "assurance_goal": 1
        }
    },
    {
        "model": "api.techniqueassurancegoal",
        "pk": 13,
        "fields": {
            "technique": 13,
            "assurance_goal": 1
        }
    },
    {
        "model": "api.techniqueassurancegoal",
        "pk": 14,
        "fields": {
            "technique": 14,
            "assurance_goal": 1
        }
    },
    {
        "model": "api.techniqueassurancegoal",
        "pk": 15,
        "fields": {
            "technique": 15,
            "assurance_goal": 1
        }
    },
    {
        "model": "api.techniqueassurancegoal",
        "pk": 16,
        "fields": {
            "technique": 16,
            "assurance_goal": 1
        }
    },
    {
        "model": "api.techniqueassurancegoal",
        "pk": 17,
        "fields": {
            "technique": 17,
            "assurance_goal": 1
        }
    },
    {
        "model": "api.techniqueassurancegoal",
        "pk": 18,
        "fields": {
            "technique": 18,
            "assurance_goal": 1
        }
    },
    {
        "model": "api.techniqueassurancegoal",
        "pk": 19,
        "fields": {
            "technique": 19,
            "assurance_goal": 1
        }
    },
    {
        "model": "api.techniqueassurancegoal",
        "pk": 20,
        "fields": {
            "technique": 20,
            "assurance_goal": 1
        }
    },
    {
        "model": "api.techniqueassurancegoal",
        "pk": 21,
        "fields": {
            "technique": 21,
            "assurance_goal": 1
        }
    },
    {
        "model": "api.techniqueassurancegoal",
        "pk": 22,
        "fields": {
            "technique": 22,
            "assurance_goal": 1
        }
    },
    {
        "model": "api.techniqueassurancegoal",
        "pk": 23,
        "fields": {
            "technique": 23,
            "assurance_goal": 1
        }
    },
    {
        "model": "api.techniqueassurancegoal",
        "pk": 24,
        "fields": {
            "technique": 24,
            "assurance_goal": 1
        }
    },
    {
        "model": "api.techniqueassurancegoal",
        "pk": 25,
        "fields": {
            "technique": 25,
            "assurance_goal": 1
        }
    },
    {
        "model": "api.techniqueassurancegoal",
        "pk": 26,
        "fields": {
            "technique": 26,
            "assurance_goal": 1
        }
    },
    {
        "model": "api.techniqueassurancegoal",
        "pk": 27,
        "fields": {
            "technique": 27,
            "assurance_goal": 1
        }
    },
    {
        "model": "api.techniqueassurancegoal",
        "pk": 28,
        "fields": {
            "technique": 28,
            "assurance_goal": 1
        }
    },
    {
        "model": "api.techniqueassurancegoal",
        "pk": 29,
        "fields": {
            "technique": 29,
            "assurance_goal": 1
        }
    },
    {
        "model": "api.techniqueassurancegoal",
        "pk": 30,
        "fields": {
            "technique": 30,
            "assurance_goal": 1
        }
    },
    {
        "model": "api.techniqueassurancegoal",
        "pk": 31,
        "fields": {
            "technique": 31,
            "assurance_goal": 1
        }
    },
    {
        "model": "api.techniqueassurancegoal",
        "pk": 32,
        "fields": {
            "technique": 32,
            "assurance_goal": 1
        }
    },
    {
        "model": "api.techniqueassurancegoal",
        "pk": 33,
        "fields": {
            "technique": 33,
            "assurance_goal": 1
        }
    },
    {
        "model": "api.techniqueassurancegoal",
        "pk": 34,
        "fields": {
            "technique": 34,
            "assurance_goal": 1
        }
    },
    {
        "model": "api.techniqueassurancegoal",
        "pk": 35,
        "fields": {
            "technique": 35,
            "assurance_goal": 1
        }
    },
    {
        "model": "api.techniqueassurancegoal",
        "pk": 36,
        "fields": {
            "technique": 36,
            "assurance_goal": 1
        }
    },
    {
        "model": "api.techniqueassurancegoal",
        "pk": 37,
        "fields": {
            "technique": 37,
            "assurance_goal": 1
        }
    },
    {
        "model": "api.techniqueassurancegoal",
        "pk": 38,
        "fields": {
            "technique": 38,
            "assurance_goal": 1
        }
    },
    {
        "model": "api.techniqueassurancegoal",
        "pk": 39,
        "fields": {
            "technique": 39,
            "assurance_goal": 1
        }
    },
    {
        "model": "api.techniqueassurancegoal",
        "pk": 40,
        "fields": {
            "technique": 40,
            "assurance_goal": 1
        }
    },
    {
        "model": "api.techniqueassurancegoal",
        "pk": 41,
        "fields": {
            "technique": 41,
            "assurance_goal": 1
        }
    },
    {
        "model": "api.techniqueassurancegoal",
        "pk": 42,
        "fields": {
            "technique": 42,
            "assurance_goal": 1
        }
    },
    {
        "model": "api.techniqueassurancegoal",
        "pk": 43,
        "fields": {
            "technique": 43,
            "assurance_goal": 1
        }
    },
    {
        "model": "api.techniqueassurancegoal",
        "pk": 44,
        "fields": {
            "technique": 44,
            "assurance_goal": 1
        }
    },
    {
        "model": "api.techniqueassurancegoal",
        "pk": 45,
        "fields": {
            "technique": 45,
            "assurance_goal": 1
        }
    },
    {
        "model": "api.techniqueassurancegoal",
        "pk": 46,
        "fields": {
            "technique": 46,
            "assurance_goal": 2
        }
    },
    {
        "model": "api.techniqueassurancegoal",
        "pk": 47,
        "fields": {
            "technique": 47,
            "assurance_goal": 2
        }
    },
    {
        "model": "api.techniqueassurancegoal",
        "pk": 48,
        "fields": {
            "technique": 48,
            "assurance_goal": 2
        }
    },
    {
        "model": "api.techniqueassurancegoal",
        "pk": 49,
        "fields": {
            "technique": 49,
            "assurance_goal": 2
        }
    },
    {
        "model": "api.techniqueassurancegoal",
        "pk": 50,
        "fields": {
            "technique": 50,
            "assurance_goal": 2
        }
    },
    {
        "model": "api.techniqueassurancegoal",
        "pk": 51,
        "fields": {
            "technique": 51,
            "assurance_goal": 2
        }
    },
    {
        "model": "api.techniqueassurancegoal",
        "pk": 52,
        "fields": {
            "technique": 52,
            "assurance_goal": 2
        }
    },
    {
        "model": "api.techniqueassurancegoal",
        "pk": 53,
        "fields": {
            "technique": 53,
            "assurance_goal": 2
        }
    },
    {
        "model": "api.techniqueassurancegoal",
        "pk": 54,
        "fields": {
            "technique": 54,
            "assurance_goal": 2
        }
    },
    {
        "model": "api.techniqueassurancegoal",
        "pk": 55,
        "fields": {
            "technique": 55,
            "assurance_goal": 2
        }
    },
    {
        "model": "api.techniqueassurancegoal",
        "pk": 56,
        "fields": {
            "technique": 56,
            "assurance_goal": 2
        }
    },
    {
        "model": "api.techniqueassurancegoal",
        "pk": 57,
        "fields": {
            "technique": 57,
            "assurance_goal": 2
        }
    },
    {
        "model": "api.techniqueassurancegoal",
        "pk": 58,
        "fields": {
            "technique": 58,
            "assurance_goal": 2
        }
    },
    {
        "model": "api.techniqueassurancegoal",
        "pk": 59,
        "fields": {
            "technique": 59,
            "assurance_goal": 2
        }
    },
    {
        "model": "api.techniqueassurancegoal",
        "pk": 60,
        "fields": {
            "technique": 60,
            "assurance_goal": 2
        }
    },
    {
        "model": "api.techniqueassurancegoal",
        "pk": 61,
        "fields": {
            "technique": 61,
            "assurance_goal": 2
        }
    },
    {
        "model": "api.techniqueassurancegoal",
        "pk": 62,
        "fields": {
            "technique": 62,
            "assurance_goal": 2
        }
    },
    {
        "model": "api.techniqueassurancegoal",
        "pk": 63,
        "fields": {
            "technique": 63,
            "assurance_goal": 2
        }
    },
    {
        "model": "api.techniqueassurancegoal",
        "pk": 64,
        "fields": {
            "technique": 64,
            "assurance_goal": 2
        }
    },
    {
        "model": "api.techniqueassurancegoal",
        "pk": 65,
        "fields": {
            "technique": 65,
            "assurance_goal": 2
        }
    },
    {
        "model": "api.techniqueassurancegoal",
        "pk": 66,
        "fields": {
            "technique": 66,
            "assurance_goal": 2
        }
    },
    {
        "model": "api.techniqueassurancegoal",
        "pk": 67,
        "fields": {
            "technique": 67,
            "assurance_goal": 2
        }
    },
    {
        "model": "api.techniqueassurancegoal",
        "pk": 68,
        "fields": {
            "technique": 68,
            "assurance_goal": 2
        }
    },
    {
        "model": "api.techniqueassurancegoal",
        "pk": 69,
        "fields": {
            "technique": 69,
            "assurance_goal": 2
        }
    },
    {
        "model": "api.techniqueassurancegoal",
        "pk": 70,
        "fields": {
            "technique": 70,
            "assurance_goal": 2
        }
    },
    {
        "model": "api.techniqueassurancegoal",
        "pk": 71,
        "fields": {
            "technique": 71,
            "assurance_goal": 2
        }
    },
    {
        "model": "api.techniqueassurancegoal",
        "pk": 72,
        "fields": {
            "technique": 72,
            "assurance_goal": 2
        }
    },
    {
        "model": "api.techniqueassurancegoal",
        "pk": 73,
        "fields": {
            "technique": 73,
            "assurance_goal": 2
        }
    },
    {
        "model": "api.techniqueassurancegoal",
        "pk": 74,
        "fields": {
            "technique": 74,
            "assurance_goal": 2
        }
    },
    {
        "model": "api.techniqueassurancegoal",
        "pk": 75,
        "fields": {
            "technique": 75,
            "assurance_goal": 2
        }
    },
    {
        "model": "api.techniqueassurancegoal",
        "pk": 76,
        "fields": {
            "technique": 76,
            "assurance_goal": 2
        }
    },
    {
        "model": "api.techniqueassurancegoal",
        "pk": 77,
        "fields": {
            "technique": 77,
            "assurance_goal": 2
        }
    },
    {
        "model": "api.techniqueassurancegoal",
        "pk": 78,
        "fields": {
            "technique": 78,
            "assurance_goal": 2
        }
    },
    {
        "model": "api.techniqueassurancegoal",
        "pk": 79,
        "fields": {
            "technique": 79,
            "assurance_goal": 2
        }
    },
    {
        "model": "api.techniquecategory",
        "pk": 1,
        "fields": {
            "technique": 1,
            "category": 1
        }
    },
    {
        "model": "api.techniquecategory",
        "pk": 2,
        "fields": {
            "technique": 2,
            "category": 1
        }
    },
    {
        "model": "api.techniquecategory",
        "pk": 3,
        "fields": {
            "technique": 3,
            "category": 1
        }
    },
    {
        "model": "api.techniquecategory",
        "pk": 4,
        "fields": {
            "technique": 4,
            "category": 1
        }
    },
    {
        "model": "api.techniquecategory",
        "pk": 5,
        "fields": {
            "technique": 5,
            "category": 1
        }
    },
    {
        "model": "api.techniquecategory",
        "pk": 6,
        "fields": {
            "technique": 6,
            "category": 1
        }
    },
    {
        "model": "api.techniquecategory",
        "pk": 7,
        "fields": {
            "technique": 7,
            "category": 1
        }
    },
    {
        "model": "api.techniquecategory",
        "pk": 8,
        "fields": {
            "technique": 8,
            "category": 1
        }
    },
    {
        "model": "api.techniquecategory",
        "pk": 9,
        "fields": {
            "technique": 9,
            "category": 1
        }
    },
    {
        "model": "api.techniquecategory",
        "pk": 10,
        "fields": {
            "technique": 10,
            "category": 1
        }
    },
    {
        "model": "api.techniquecategory",
        "pk": 11,
        "fields": {
            "technique": 11,
            "category": 1
        }
    },
    {
        "model": "api.techniquecategory",
        "pk": 12,
        "fields": {
            "technique": 12,
            "category": 1
        }
    },
    {
        "model": "api.techniquecategory",
        "pk": 13,
        "fields": {
            "technique": 13,
            "category": 1
        }
    },
    {
        "model": "api.techniquecategory",
        "pk": 14,
        "fields": {
            "technique": 14,
            "category": 2
        }
    },
    {
        "model": "api.techniquecategory",
        "pk": 15,
        "fields": {
            "technique": 15,
            "category": 2
        }
    },
    {
        "model": "api.techniquecategory",
        "pk": 16,
        "fields": {
            "technique": 16,
            "category": 3
        }
    },
    {
        "model": "api.techniquecategory",
        "pk": 17,
        "fields": {
            "technique": 17,
            "category": 3
        }
    },
    {
        "model": "api.techniquecategory",
        "pk": 18,
        "fields": {
            "technique": 18,
            "category": 3
        }
    },
    {
        "model": "api.techniquecategory",
        "pk": 19,
        "fields": {
            "technique": 19,
            "category": 3
        }
    },
    {
        "model": "api.techniquecategory",
        "pk": 20,
        "fields": {
            "technique": 20,
            "category": 3
        }
    },
    {
        "model": "api.techniquecategory",
        "pk": 21,
        "fields": {
            "technique": 21,
            "category": 3
        }
    },
    {
        "model": "api.techniquecategory",
        "pk": 22,
        "fields": {
            "technique": 22,
            "category": 3
        }
    },
    {
        "model": "api.techniquecategory",
        "pk": 23,
        "fields": {
            "technique": 23,
            "category": 8
        }
    },
    {
        "model": "api.techniquecategory",
        "pk": 24,
        "fields": {
            "technique": 24,
            "category": 3
        }
    },
    {
        "model": "api.techniquecategory",
        "pk": 25,
        "fields": {
            "technique": 25,
            "category": 3
        }
    },
    {
        "model": "api.techniquecategory",
        "pk": 26,
        "fields": {
            "technique": 26,
            "category": 3
        }
    },
    {
        "model": "api.techniquecategory",
        "pk": 27,
        "fields": {
            "technique": 27,
            "category": 4
        }
    },
    {
        "model": "api.techniquecategory",
        "pk": 28,
        "fields": {
            "technique": 28,
            "category": 4
        }
    },
    {
        "model": "api.techniquecategory",
        "pk": 29,
        "fields": {
            "technique": 29,
            "category": 4
        }
    },
    {
        "model": "api.techniquecategory",
        "pk": 30,
        "fields": {
            "technique": 30,
            "category": 4
        }
    },
    {
        "model": "api.techniquecategory",
        "pk": 31,
        "fields": {
            "technique": 31,
            "category": 5
        }
    },
    {
        "model": "api.techniquecategory",
        "pk": 32,
        "fields": {
            "technique": 32,
            "category": 5
        }
    },
    {
        "model": "api.techniquecategory",
        "pk": 33,
        "fields": {
            "technique": 33,
            "category": 6
        }
    },
    {
        "model": "api.techniquecategory",
        "pk": 34,
        "fields": {
            "technique": 34,
            "category": 6
        }
    },
    {
        "model": "api.techniquecategory",
        "pk": 35,
        "fields": {
            "technique": 35,
            "category": 6
        }
    },
    {
        "model": "api.techniquecategory",
        "pk": 36,
        "fields": {
            "technique": 36,
            "category": 7
        }
    },
    {
        "model": "api.techniquecategory",
        "pk": 37,
        "fields": {
            "technique": 37,
            "category": 8
        }
    },
    {
        "model": "api.techniquecategory",
        "pk": 38,
        "fields": {
            "technique": 38,
            "category": 8
        }
    },
    {
        "model": "api.techniquecategory",
        "pk": 39,
        "fields": {
            "technique": 39,
            "category": 3
        }
    },
    {
        "model": "api.techniquecategory",
        "pk": 40,
        "fields": {
            "technique": 40,
            "category": 1
        }
    },
    {
        "model": "api.techniquecategory",
        "pk": 41,
        "fields": {
            "technique": 41,
            "category": 4
        }
    },
    {
        "model": "api.techniquecategory",
        "pk": 42,
        "fields": {
            "technique": 42,
            "category": 4
        }
    },
    {
        "model": "api.techniquecategory",
        "pk": 43,
        "fields": {
            "technique": 43,
            "category": 1
        }
    },
    {
        "model": "api.techniquecategory",
        "pk": 44,
        "fields": {
            "technique": 44,
            "category": 1
        }
    },
    {
        "model": "api.techniquecategory",
        "pk": 45,
        "fields": {
            "technique": 45,
            "category": 4
        }
    },
    {
        "model": "api.techniquecategory",
        "pk": 46,
        "fields": {
            "technique": 46,
            "category": 9
        }
    },
    {
        "model": "api.techniquecategory",
        "pk": 47,
        "fields": {
            "technique": 47,
            "category": 9
        }
    },
    {
        "model": "api.techniquecategory",
        "pk": 48,
        "fields": {
            "technique": 48,
            "category": 9
        }
    },
    {
        "model": "api.techniquecategory",
        "pk": 49,
        "fields": {
            "technique": 49,
            "category": 9
        }
    },
    {
        "model": "api.techniquecategory",
        "pk": 50,
        "fields": {
            "technique": 50,
            "category": 9
        }
    },
    {
        "model": "api.techniquecategory",
        "pk": 51,
        "fields": {
            "technique": 51,
            "category": 9
        }
    },
    {
        "model": "api.techniquecategory",
        "pk": 52,
        "fields": {
            "technique": 52,
            "category": 9
        }
    },
    {
        "model": "api.techniquecategory",
        "pk": 53,
        "fields": {
            "technique": 53,
            "category": 9
        }
    },
    {
        "model": "api.techniquecategory",
        "pk": 54,
        "fields": {
            "technique": 54,
            "category": 9
        }
    },
    {
        "model": "api.techniquecategory",
        "pk": 55,
        "fields": {
            "technique": 55,
            "category": 9
        }
    },
    {
        "model": "api.techniquecategory",
        "pk": 56,
        "fields": {
            "technique": 56,
            "category": 9
        }
    },
    {
        "model": "api.techniquecategory",
        "pk": 57,
        "fields": {
            "technique": 57,
            "category": 9
        }
    },
    {
        "model": "api.techniquecategory",
        "pk": 58,
        "fields": {
            "technique": 58,
            "category": 9
        }
    },
    {
        "model": "api.techniquecategory",
        "pk": 59,
        "fields": {
            "technique": 59,
            "category": 9
        }
    },
    {
        "model": "api.techniquecategory",
        "pk": 60,
        "fields": {
            "technique": 60,
            "category": 9
        }
    },
    {
        "model": "api.techniquecategory",
        "pk": 61,
        "fields": {
            "technique": 61,
            "category": 9
        }
    },
    {
        "model": "api.techniquecategory",
        "pk": 62,
        "fields": {
            "technique": 62,
            "category": 9
        }
    },
    {
        "model": "api.techniquecategory",
        "pk": 63,
        "fields": {
            "technique": 63,
            "category": 9
        }
    },
    {
        "model": "api.techniquecategory",
        "pk": 64,
        "fields": {
            "technique": 64,
            "category": 9
        }
    },
    {
        "model": "api.techniquecategory",
        "pk": 65,
        "fields": {
            "technique": 65,
            "category": 9
        }
    },
    {
        "model": "api.techniquecategory",
        "pk": 66,
        "fields": {
            "technique": 66,
            "category": 9
        }
    },
    {
        "model": "api.techniquecategory",
        "pk": 67,
        "fields": {
            "technique": 67,
            "category": 12
        }
    },
    {
        "model": "api.techniquecategory",
        "pk": 68,
        "fields": {
            "technique": 68,
            "category": 12
        }
    },
    {
        "model": "api.techniquecategory",
        "pk": 69,
        "fields": {
            "technique": 69,
            "category": 12
        }
    },
    {
        "model": "api.techniquecategory",
        "pk": 70,
        "fields": {
            "technique": 70,
            "category": 12
        }
    },
    {
        "model": "api.techniquecategory",
        "pk": 71,
        "fields": {
            "technique": 71,
            "category": 12
        }
    },
    {
        "model": "api.techniquecategory",
        "pk": 72,
        "fields": {
            "technique": 72,
            "category": 12
        }
    },
    {
        "model": "api.techniquecategory",
        "pk": 73,
        "fields": {
            "technique": 73,
            "category": 12
        }
    },
    {
        "model": "api.techniquecategory",
        "pk": 74,
        "fields": {
            "technique": 74,
            "category": 13
        }
    },
    {
        "model": "api.techniquecategory",
        "pk": 75,
        "fields": {
            "technique": 75,
            "category": 13
        }
    },
    {
        "model": "api.techniquecategory",
        "pk": 76,
        "fields": {
            "technique": 76,
            "category": 13
        }
    },
    {
        "model": "api.techniquecategory",
        "pk": 77,
        "fields": {
            "technique": 77,
            "category": 9
        }
    },
    {
        "model": "api.techniquecategory",
        "pk": 78,
        "fields": {
            "technique": 78,
            "category": 9
        }
    },
    {
        "model": "api.techniquecategory",
        "pk": 79,
        "fields": {
            "technique": 79,
            "category": 14
        }
    },
    {
        "model": "api.techniquesubcategory",
        "pk": 1,
        "fields": {
            "technique": 1,
            "subcategory": 1
        }
    },
    {
        "model": "api.techniquesubcategory",
        "pk": 2,
        "fields": {
            "technique": 2,
            "subcategory": 1
        }
    },
    {
        "model": "api.techniquesubcategory",
        "pk": 3,
        "fields": {
            "technique": 3,
            "subcategory": 1
        }
    },
    {
        "model": "api.techniquesubcategory",
        "pk": 4,
        "fields": {
            "technique": 4,
            "subcategory": 1
        }
    },
    {
        "model": "api.techniquesubcategory",
        "pk": 5,
        "fields": {
            "technique": 5,
            "subcategory": 1
        }
    },
    {
        "model": "api.techniquesubcategory",
        "pk": 6,
        "fields": {
            "technique": 6,
            "subcategory": 1
        }
    },
    {
        "model": "api.techniquesubcategory",
        "pk": 7,
        "fields": {
            "technique": 7,
            "subcategory": 1
        }
    },
    {
        "model": "api.techniquesubcategory",
        "pk": 8,
        "fields": {
            "technique": 8,
            "subcategory": 1
        }
    },
    {
        "model": "api.techniquesubcategory",
        "pk": 9,
        "fields": {
            "technique": 9,
            "subcategory": 1
        }
    },
    {
        "model": "api.techniquesubcategory",
        "pk": 10,
        "fields": {
            "technique": 10,
            "subcategory": 1
        }
    },
    {
        "model": "api.techniquesubcategory",
        "pk": 11,
        "fields": {
            "technique": 11,
            "subcategory": 1
        }
    },
    {
        "model": "api.techniquesubcategory",
        "pk": 12,
        "fields": {
            "technique": 12,
            "subcategory": 2
        }
    },
    {
        "model": "api.techniquesubcategory",
        "pk": 13,
        "fields": {
            "technique": 13,
            "subcategory": 2
        }
    },
    {
        "model": "api.techniquesubcategory",
        "pk": 14,
        "fields": {
            "technique": 14,
            "subcategory": 3
        }
    },
    {
        "model": "api.techniquesubcategory",
        "pk": 15,
        "fields": {
            "technique": 15,
            "subcategory": 4
        }
    },
    {
        "model": "api.techniquesubcategory",
        "pk": 16,
        "fields": {
            "technique": 16,
            "subcategory": 5
        }
    },
    {
        "model": "api.techniquesubcategory",
        "pk": 17,
        "fields": {
            "technique": 17,
            "subcategory": 5
        }
    },
    {
        "model": "api.techniquesubcategory",
        "pk": 18,
        "fields": {
            "technique": 18,
            "subcategory": 5
        }
    },
    {
        "model": "api.techniquesubcategory",
        "pk": 40,
        "fields": {
            "technique": 40,
            "subcategory": 1
        }
    },
    {
        "model": "api.techniquesubcategory",
        "pk": 43,
        "fields": {
            "technique": 43,
            "subcategory": 1
        }
    },
    {
        "model": "api.techniquesubcategory",
        "pk": 44,
        "fields": {
            "technique": 44,
            "subcategory": 1
        }
    }
]